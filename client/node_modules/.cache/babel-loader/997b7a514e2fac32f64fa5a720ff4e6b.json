{"ast":null,"code":"/**\n * ISC License\n *\n * Copyright (c) 2018, Aleck Greenham\n *\n * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar get = _interopDefault(require('lodash.get'));\n\nvar set = _interopDefault(require('lodash.set'));\n\nvar reduce = _interopDefault(require('lodash.reduce'));\n\nvar isPlainObject = _interopDefault(require('lodash.isplainobject'));\n\nvar each = _interopDefault(require('lodash.foreach'));\n\nvar toPath = _interopDefault(require('lodash.topath'));\n\nvar isString = _interopDefault(require('lodash.isstring'));\n\nvar deepClone = _interopDefault(require('lodash.clonedeep'));\n\nvar isUndefined = _interopDefault(require('lodash.isundefined'));\n\nvar unique = _interopDefault(require('lodash.uniq'));\n\nvar keys = _interopDefault(require('lodash.keys'));\n\nvar map = _interopDefault(require('lodash.map'));\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar unset = _interopDefault(require('lodash.unset'));\n\nvar drop = _interopDefault(require('lodash.drop'));\n\nvar has = _interopDefault(require('lodash.has'));\n\nvar defaultsDeep = _interopDefault(require('lodash.defaultsdeep'));\n\nvar invariant = _interopDefault(require('invariant'));\n\nfunction emptyFunc() {// Noop\n}\n\nfunction arrayFrom(target) {\n  if (target) {\n    if (Array.isArray(target)) {\n      return target;\n    } else {\n      return [target];\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction pickDeep(source, paths) {\n  return reduce(paths, function (memo, path) {\n    var sourceValue = get(source, path);\n    set(memo, path, sourceValue);\n    return memo;\n  }, {});\n}\n\nfunction pickOutermost(target) {\n  var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (isPlainObject(target)) {\n    each(target, function (subValue) {\n      pickOutermost(subValue, list);\n    });\n  } else if (Array.isArray(target)) {\n    each(target, function (element) {\n      pickOutermost(element, list);\n    });\n  } else {\n    if (target) {\n      list.push(target);\n    }\n  }\n\n  return list;\n}\n\nfunction isNumberString(string) {\n  return !isNaN(+string);\n}\n\nvar Wildcard = '*';\n\nfunction extendAnyTouchedAncestors(target, path) {\n  var pathSegments = toPath(path);\n  var ancestorPathSegments = touchedAncestorPathSegments(target, pathSegments);\n\n  if (ancestorPathSegments) {\n    var newPathNode = function () {\n      var nextPathSegment = pathSegments[ancestorPathSegments.length];\n\n      if (isNumberString(nextPathSegment)) {\n        return [];\n      } else {\n        return {};\n      }\n    }();\n\n    newPathNode[Wildcard] = Wildcard;\n    set(target, ancestorPathSegments, newPathNode);\n  }\n}\n\nfunction touchedAncestorPathSegments(target, pathSegments) {\n  var index = 0;\n\n  while (index <= pathSegments.length) {\n    var thisPathSegments = pathSegments.slice(0, index + 1);\n    var thisValue = get(target, thisPathSegments);\n\n    if (isString(thisValue)) {\n      return thisPathSegments;\n    }\n\n    index++;\n  }\n}\n\nfunction mergeValidatedValuePaths(newTouchedValuePaths, previouslyTouchedValues) {\n  return reduce(newTouchedValuePaths, function (updatedTouchedValues, path) {\n    if (path !== Wildcard) {\n      extendAnyTouchedAncestors(updatedTouchedValues, path);\n      set(updatedTouchedValues, path, path);\n    }\n\n    return updatedTouchedValues;\n  }, deepClone(previouslyTouchedValues));\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nfunction valueAlreadyTouched(value) {\n  return isString(value) || value && value[Wildcard];\n}\n\nfunction valuesWithDefaultsAndExemptions(_ref) {\n  var _ref$deepMergeExempti = _ref.deepMergeExemptions,\n      deepMergeExemptions = _ref$deepMergeExempti === undefined ? {} : _ref$deepMergeExempti,\n      overrides = _ref.overrides,\n      defaultValue = _ref.defaultValue;\n\n  if (valueAlreadyTouched(deepMergeExemptions) || isUndefined(defaultValue)) {\n    return overrides;\n  } else {\n    if (isUndefined(overrides)) {\n      return defaultValue;\n    } else {\n      if (isPlainObject(overrides)) {\n        var unionOfObjectKeys = unique([].concat(toConsumableArray(keys(defaultValue)), toConsumableArray(keys(overrides))));\n        return reduce(unionOfObjectKeys, function (memo, key) {\n          if (valueAlreadyTouched(deepMergeExemptions[key])) {\n            memo[key] = overrides[key];\n          } else {\n            memo[key] = valuesWithDefaultsAndExemptions({\n              defaultValue: defaultValue[key],\n              overrides: overrides[key],\n              deepMergeExemptions: deepMergeExemptions[key]\n            });\n          }\n\n          return memo;\n        }, {});\n      } else if (Array.isArray(overrides)) {\n        var overridesIsLongerThanDefault = overrides.length > defaultValue.length;\n\n        if (overridesIsLongerThanDefault) {\n          return map(overrides, function (overrideElement, index) {\n            if (valueAlreadyTouched(deepMergeExemptions[index])) {\n              return overrideElement;\n            } else {\n              return valuesWithDefaultsAndExemptions({\n                defaultValue: defaultValue[index],\n                overrides: overrideElement,\n                deepMergeExemptions: deepMergeExemptions[index]\n              });\n            }\n          });\n        } else {\n          return map(defaultValue, function (defaultValueElement, index) {\n            if (valueAlreadyTouched(deepMergeExemptions[index])) {\n              return overrides[index];\n            } else {\n              return valuesWithDefaultsAndExemptions({\n                defaultValue: defaultValueElement,\n                overrides: overrides[index],\n                deepMergeExemptions: deepMergeExemptions[index]\n              });\n            }\n          });\n        }\n      } else {\n        return overrides;\n      }\n    }\n  }\n}\n\nvar Joi = void 0;\nvar DEFAULT_STATE = {\n  errors: {},\n  values: {},\n  touchedValues: {},\n  validatedValues: {},\n  changingValues: [],\n  validateAllValues: false\n};\n/**\n * Takes arguments that resemble those commonly passed to event handlers and attempts\n * to guess what the desired event value should be. This function is the default used\n * by all *Handler methods to extract values from events so that they can be set and\n * validated.\n * @param {*} event The first argument, assumed to be an event object but does not need\n*         to be.\n * @param {*} value The second argument, assumed to be the value of the event, but\n *        does not need to be.\n * @returns {*} The assumed event value\n */\n\nfunction guessCorrectValue(event, value) {\n  /**\n   * Inspect the callback arguments when the handler is called\n   */\n  var eventTargetValue = get(event, 'target.value');\n\n  if (eventTargetValue) {\n    // Use value from event object\n    return eventTargetValue;\n  } else {\n    // Use value provided as second argument\n    return value;\n  }\n}\n/**\n * Returns the target value of an event that is passed to it\n * @param {Event} event Event object for which the target value will be returned\n * @returns {*} The target value of the event passed as the first argument\n */\n\n\nfunction useEventTargetValue(event) {\n  return get(event, 'target.value');\n}\n/**\n * Returns the first argument. Used for adapting event handlers that return the event\n * value as the first argument.\n * @param {*} value First argument\n * @returns {*} The value of the first argument\n */\n\n\nfunction useFirstArgument(value) {\n  return value;\n}\n/**\n * Returns the second argument. Used for adapting event handlers that return the event\n * value as the second argument.\n * @param {*} arg1 The first argument\n * @param {*} value Second argument\n * @returns {*} The value of the second argument\n */\n\n\nfunction useSecondArgument(arg1, value) {\n  return value;\n}\n/**\n * Returns the third argument. Used for adapting event handlers that return the event\n * value as the third argument.\n * @param {*} arg1 The first argument\n * @param {*} arg2 The second argument\n * @param {*} value Third argument\n * @returns {*} The value of the third argument\n */\n\n\nfunction useThirdArgument(arg1, arg2, value) {\n  return value;\n}\n\nvar defaultChangeHandlerStrategy = guessCorrectValue;\n/**\n * Returns a validator component that wraps a validated component and provides\n * methods for updating and validating the validator component's state via the\n * validated component's props\n *\n * @param {Component} ValidatedComponent Component to wrap and provide the methods\n *        for updating and validating values as props\n * @param {Object.<String,*>} options A configuration hash\n * @param {Joi|Object?} options.joiSchema A Joi schema that, if provided, is used\n *        to validate the values stored in the validator component's state every time\n *        one of the validation methods are called.\n * @param {Object?} options.joiOptions Options that are passed to Joi on every\n *        validation attempt. See the documentation for the version of Joi that you\n *        are using.\n * @param {Function|Array.<Function>?} options.validator A function or array of\n *        functions to use to validate the values stored in the validator component's\n *        state every time one of the validate methods are called. Can be used in\n *        conjunction with the joiSchema option, or without it. If both are specified,\n *        the joiSchema validation is performed first and then the validators are\n *        called in the order that they appear in the array.\n * @param {String|Array.<String>?} options.only Path or paths to the part of the props\n *        object passed to the validator (and passed through to the validated\n *        object) that should be validated against the joi schema. Useful if you\n *        want to validate only part of the props.\n * @param {String|Array.<String>?} pseudoValues List of paths to values that aren't\n *        actually in the props passed to the validator component and are never set\n *        by the validated component, but are accessible to attach validation errors\n *        to, in validator functions.\n * @param {String=\"errors\"} externalErrorsPath Path to the attribute on props that\n *        stores the errors object of any validation performed outside of the\n *        validator component. These errors are merged into those set by the validator\n *        component.\n * @param {Function?} changeHandlerStrategy The default change handler strategy to\n *        use in the validator component. i.e. The default function that should be used\n *        to map the arguments of event handlers to the validation handlers', provided\n *        by the validator component. If unspecified, the default set at the package\n *        level using setChangeHandlerStrategy() is used, or the guessCorrectValue\n *        function if none has been otherwise specified.\n * @returns {ValidatorComponent} The validator component, that wrapping the validated\n *        component.\n */\n\nvar ReactJoiValidation = function ReactJoiValidation(ValidatedComponent, _ref) {\n  var joiSchema = _ref.joiSchema,\n      joiOptions = _ref.joiOptions,\n      validator = _ref.validator,\n      only = _ref.only,\n      _ref$pseudoValues = _ref.pseudoValues,\n      pseudoValues = _ref$pseudoValues === undefined ? [] : _ref$pseudoValues,\n      externalErrorsPath = _ref.externalErrorsPath,\n      changeHandlerStrategy = _ref.changeHandlerStrategy;\n\n  function usingSingularValidationScope() {\n    return isString(only);\n  }\n\n  function wrapObject(object) {\n    if (usingSingularValidationScope()) {\n      return set({}, only, object);\n    } else {\n      return object;\n    }\n  }\n\n  function unwrapObject(object) {\n    if (usingSingularValidationScope()) {\n      return get(object, only);\n    } else {\n      return object;\n    }\n  }\n\n  function pickErrors(errors, touchedValues) {\n    var listOfTouchedValues = pickOutermost(touchedValues);\n    var valuesToPick = [].concat(toConsumableArray(listOfTouchedValues), toConsumableArray(arrayFrom(pseudoValues)));\n    return reduce(valuesToPick, function (activeErrors, valuePath) {\n      if (!valuePath.endsWith(Wildcard)) {\n        var error = get(errors, valuePath);\n\n        if (error) {\n          set(activeErrors, valuePath, error);\n        }\n      }\n\n      return activeErrors;\n    }, {});\n  }\n\n  function getValueToUse(options, firstArg, secondArg, thirdArg) {\n    if (has(options, 'value')) {\n      /**\n       * Allow setting a fixed value at the time of binding the change\n       * handler and ignore whatever value is passed when the handler\n       * is called\n       */\n      return options.value;\n    } else {\n      return (options.strategy || changeHandlerStrategy || defaultChangeHandlerStrategy)(firstArg, secondArg, thirdArg);\n    }\n  }\n  /**\n   * @class ValidatorComponent Component class that renders its children with props\n   * that contain functions for updating and validating the values stored in the\n   * validator component's state.\n   */\n\n\n  var ValidatorComponent = function (_Component) {\n    inherits(ValidatorComponent, _Component);\n    /**\n     * Creates a new instance of a ValidatorComponent, binds all validation and\n     * update methods to that instance, and sets its default state.\n     *\n     * @param {Object.<*,*>} props Props that are passed through this\n     *        component to the validated component. All or part of these values\n     *        determine the initial values in the component's state, depending\n     *        on ReactJoiValidation's only option.\n     * @param {Object.<*,*>} context Context object for this component and the\n     *        validated component\n     *\n     * @see ReactJoiValidation\n     */\n\n    function ValidatorComponent(props, context) {\n      classCallCheck(this, ValidatorComponent);\n\n      var _this = possibleConstructorReturn(this, (ValidatorComponent.__proto__ || Object.getPrototypeOf(ValidatorComponent)).call(this, props, context));\n\n      _this.changeHandler = _this.changeHandler.bind(_this);\n      _this.changesHandler = _this.changesHandler.bind(_this);\n      _this.changeValue = _this.changeValue.bind(_this);\n      _this.changeValues = _this.changeValues.bind(_this);\n      _this.pushHandler = _this.pushHandler.bind(_this);\n      _this.pushValue = _this.pushValue.bind(_this);\n      _this.togglePushHandler = _this.togglePushHandler.bind(_this);\n      _this.togglePushValue = _this.togglePushValue.bind(_this);\n      _this.unshiftHandler = _this.unshiftHandler.bind(_this);\n      _this.unshiftValue = _this.unshiftValue.bind(_this);\n      _this.toggleUnshiftHandler = _this.toggleUnshiftHandler.bind(_this);\n      _this.toggleUnshiftValue = _this.toggleUnshiftValue.bind(_this);\n      _this.pullHandler = _this.pullHandler.bind(_this);\n      _this.pullValue = _this.pullValue.bind(_this);\n      _this.validateHandler = _this.validateHandler.bind(_this);\n      _this.validate = _this.validate.bind(_this);\n      _this.validateAll = _this.validateAll.bind(_this);\n      _this.validateAllHandler = _this.validateAllHandler.bind(_this);\n      _this.clearValidation = _this.clearValidation.bind(_this);\n      _this.clearValidationState = _this.clearValidationState.bind(_this);\n      _this.clearValidationAndResetValues = _this.clearValidationAndResetValues.bind(_this);\n      _this.clearTouchedValues = _this.clearTouchedValues.bind(_this);\n      _this.state = _extends({}, DEFAULT_STATE);\n      return _this;\n    }\n    /**\n     * Renders the validated component with all of the functions for updating and\n     * validating the validator component's state, as props. All props passed to the\n     * validator component are also passed through to the validated component.\n     *\n     * @returns {Component} The validated component, with the update and validation\n     *          props provided\n     */\n\n\n    createClass(ValidatorComponent, [{\n      key: 'render',\n      value: function render() {\n        var _state = this.state,\n            touchedValues = _state.touchedValues,\n            values = _state.values;\n        return React__default.createElement(ValidatedComponent, _extends({}, this.props, this._valuesWithDefaults({\n          values: values,\n          touchedValues: touchedValues\n        }), {\n          errors: this._getActiveErrors(),\n          changeHandler: this.changeHandler,\n          changesHandler: this.changesHandler,\n          changeValue: this.changeValue,\n          changeValues: this.changeValues,\n          pushHandler: this.pushHandler,\n          pushValue: this.pushValue,\n          togglePushHandler: this.togglePushHandler,\n          togglePushValue: this.togglePushValue,\n          unshiftHandler: this.unshiftHandler,\n          unshiftValue: this.unshiftValue,\n          toggleUnshiftHandler: this.toggleUnshiftHandler,\n          toggleUnshiftValue: this.toggleUnshiftValue,\n          pullHandler: this.pullHandler,\n          pullValue: this.pullValue,\n          validateHandler: this.validateHandler,\n          validate: this.validate,\n          validateAllHandler: this.validateAllHandler,\n          validateAll: this.validateAll,\n          clearValidationState: this.clearValidationState,\n          clearValidation: this.clearValidation,\n          clearValidationAndResetValues: this.clearValidationAndResetValues,\n          clearValidationTouchedValues: this.clearTouchedValues\n        }));\n      }\n      /**\n       * Returns a function that, when called, pushes a value onto the end of an array\n       * stored in the validator component's state\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should push new values onto.\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {Boolean=true} options.allowDuplicates Whether or not to push a value\n       *        onto the array if it already appears in that array.\n       * @param {*?} options.value The value to push onto the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the array\n       *        at valuePath, according to the options provided\n       *\n       * @example\n       * render() {\n       *   const { pushHandler, cities } = this.props;\n       *\n       *   return(\n       *     [\"Paris\", \"New York City\", \"London\"].map((city) => {\n       *       return(\n       *         <input type='button' label={ \"Add \" + city } onClick={ pushHandler('cities') } />\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       */\n\n    }, {\n      key: 'pushHandler',\n      value: function pushHandler(valuePath) {\n        var _this2 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return function (firstArg, secondArg, thirdArg) {\n          _this2.pushValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n      /**\n       * Immediately pushes a value onto the end of an array\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should push new values onto.\n       * @param {*} value The value to push onto the end of the array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean=true} options.allowDuplicates Whether or not to push a value\n       *        onto the array if it already appears in that array.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * handleAddCity(city) {\n       *    const { pushValue, cities } = this.props;\n       *\n       *    if (cities.indexOf(city) === -1 ) {\n       *       pushValue('cities', city);\n       *    }\n       * }\n       *\n       */\n\n    }, {\n      key: 'pushValue',\n      value: function pushValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        this._addValue('end', valuePath, value, options);\n      }\n      /**\n       * Returns a function that, when called, pushes a value onto the end of an array\n       * if that value is not already in the array, otherwise it removes it. i.e. it\n       * toggles that value's inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should push new values onto.\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {*?} options.value The value to toggle in the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will toggle the\n       *        inclusion or exclusion of a value in the array at at valuePath\n       *\n       * @example\n       * render() {\n       *   const { togglePushHandler, cities } = this.props;\n       *\n       *   return(\n       *     [\"Paris\", \"New York City\", \"London\"].map((city) => {\n       *       return(\n       *         <label>\n       *            <input type='checkbox' onClick={ togglePushHandler('cities') } />\n       *            { city }\n       *         </label>\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       */\n\n    }, {\n      key: 'togglePushHandler',\n      value: function togglePushHandler(valuePath) {\n        var _this3 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return function (firstArg, secondArg, thirdArg) {\n          _this3.togglePushValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n      /**\n       * Immediately pushes a value onto the end of an array if that value is not\n       * already in the array, otherwise it removes it. i.e. it toggles that value's\n       * inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should toggle the value.\n       * @param {*} value The value to toggle the inclusion or exclusion in array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * render() {\n       *   return(\n       *     [\"Paris\", \"New York City\", \"London\"].map((city) => {\n       *       return(\n       *         <label>\n       *             <input type='checkbox' onClick={ this.handleToggleCity('cities') } />\n       *             { city }\n       *         </label>\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       * handleToggleCity(city) {\n       *   const { togglePushHandler, cities } = this.props;\n       *\n       *   togglePushHandler('cities', city);\n       * }\n       *\n       */\n\n    }, {\n      key: 'togglePushValue',\n      value: function togglePushValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        if (currentValue.indexOf(value) === -1) {\n          this._addValue('end', valuePath, value, _extends({}, options, {\n            allowDuplicates: false\n          }));\n        } else {\n          this.pullValue(valuePath, value, _extends({}, options, {\n            removeAllInstances: true\n          }));\n        }\n      }\n      /**\n       * Similar to pushValueHandler, but the returned function, when called,\n       * adds a value to the beginning of an array, instead\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should add a value to the beginning\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {Boolean=true} options.allowDuplicates Whether or not to unshift a value\n       *        onto the array if it already appears in that array.\n       * @param {*?} options.value The value to unshift onto the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the array\n       *        at valuePath, according to the options provided\n       *\n       * @see pushValueHandler\n       */\n\n    }, {\n      key: 'unshiftHandler',\n      value: function unshiftHandler(valuePath) {\n        var _this4 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return function (firstArg, secondArg, thirdArg) {\n          _this4.unshiftValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n      /**\n       * Similar to pushValue, but immediately adds a value to the beginning of an array\n       * instead\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should add a new values to the beginning.\n       * @param {*} value The value to add to the start of the array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean=true} options.allowDuplicates Whether or not to unshift a value\n       *        onto the array if it already appears in that array.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @see pushValue\n       */\n\n    }, {\n      key: 'unshiftValue',\n      value: function unshiftValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        this._addValue('start', valuePath, value, options);\n      }\n      /**\n       * Returns a function that, when called, adds a value to the beginning of an array\n       * if that value is not already in the array, otherwise it removes it. i.e. it\n       * toggles that value's inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should add new value to the start.\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {*?} options.value The value to toggle in the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will toggle the\n       *        inclusion or exclusion of a value in the array at at valuePath\n       *\n       * @see togglePushHandler\n       */\n\n    }, {\n      key: 'toggleUnshiftHandler',\n      value: function toggleUnshiftHandler(valuePath) {\n        var _this5 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return function (firstArg, secondArg, thirdArg) {\n          _this5.toggleUnshiftValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n      /**\n       * Immediately pushes a value to the beginning of an array if that value is not\n       * already in the array, otherwise it removes it. i.e. it toggles that value's\n       * inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should toggle the value.\n       * @param {*} value The value to toggle the inclusion or exclusion in array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @see togglePushValue\n       */\n\n    }, {\n      key: 'toggleUnshiftValue',\n      value: function toggleUnshiftValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        if (currentValue.indexOf(value) === -1) {\n          this._addValue('start', valuePath, value, _extends({}, options, {\n            allowDuplicates: false\n          }));\n        } else {\n          this.pullValue(valuePath, value, _extends({}, options, {\n            removeAllInstances: true\n          }));\n        }\n      }\n      /**\n       * The opposite of pushHandler and unshiftHandler; returns a function that,\n       * when called, will remove one or more instances of a value from an array.\n       *\n       * The default behaviour is to remove only the first instance of the specified\n       * value from the array. i.e. the instance of the value with the lowest index.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should remove the value.\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {*?} options.value The value to remove from the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Number} options.index If specified, the element at the corresponding\n       *        index position will be removed, regardless of the value passed to the\n       *        function.\n       * @param {Boolean=false} options.removeAllInstances If true, all instances of\n       *        the specified value are removed from the array - not just the first one.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used the value to remove from the array. Useful\n       *        for standardising different event handler argument signatures. The\n       *        package exports some common strategy functions for you to use, but\n       *        it is possible to use any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will remove the value\n       *        from the array at valuePath, according to the options provide\n       *\n       * @example\n       * render() {\n       *   const { pullHandler, cities } = this.props;\n       *\n       *   return(\n       *     cities.map((city, index) => {\n       *       return(\n       *         <input type='button' label={ \"Remove \" + city } onClick={ pullHandler('cities', { removeAllInstances: true }) } />\n       *       );\n       *     }\n       *   );\n       * }\n       */\n\n    }, {\n      key: 'pullHandler',\n      value: function pullHandler(valuePath) {\n        var _this6 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return function (firstArg, secondArg, thirdArg) {\n          _this6.pullValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n      /**\n       * The opposite of pushValue and unshiftValue; immediately removes a value from\n       * an array.\n       *\n       * The default behaviour is to remove only the first instance of the specified\n       * value from the array. i.e. the instance of the value with the lowest index.\n       *\n       * @param {String} valuePath A path pointing to the array, from which the\n       *        function should remove the specified value\n       * @param {*} value The value to remove from the array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Number} options.index If specified, the element at the corresponding\n       *        index position will be removed, regardless of the value passed to the\n       *        function.\n       * @param {Boolean=false} options.removeAllInstances If true, all instances of\n       *        the specified value are removed from the array - not just the first one.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       *\n       * @see pushValue\n       *\n       * @example\n       * render() {\n       *   const { cities } = this.props;\n       *\n       *   return(\n       *     cities.map((city, index) => {\n       *       return(\n       *         <input type='button' label={ \"Remove \" + city } onClick={ this.handleRemoveCity } />\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       * handleRemoveCity(city) {\n       *    const { pullValue, cities, user } = this.props;\n       *\n       *    if (user.isAdmin) {\n       *       pullValue('cities', city);\n       *    }\n       * }\n       */\n\n    }, {\n      key: 'pullValue',\n      value: function pullValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        var finalValue = function () {\n          if (options.removeAllInstances) {\n            return currentValue.reduce(function (memo, element) {\n              if (element !== value) {\n                memo.push(element);\n              }\n\n              return memo;\n            }, []);\n          } else {\n            invariant(!has(options, 'index') || typeof options.index === 'number', 'pullValue\\'s options.index must be a number; Received ' + options.index + ' instead');\n            var index = has(options, 'index') ? options.index : currentValue.indexOf(value);\n\n            if (index === -1) {\n              return currentValue;\n            } else {\n              return [].concat(toConsumableArray(currentValue.slice(0, index)), toConsumableArray(currentValue.slice(index + 1)));\n            }\n          }\n        }();\n\n        this.changeValue(valuePath, finalValue, options);\n      }\n      /**\n       * Returns a function that, when called, updates the specified attribute with\n       * a new value\n       *\n       * @param {String} valuePath A path pointing to the attribute to update\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {*?} options.value The new value to set when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the\n       *        attribute at valuePath, according to the options provided\n       *\n       * @example\n       * const { user: { username }, changeHandler } = this.props;\n       *\n       *  return(\n       *    <div>\n       *      <input value={username} onChange={changeHandler('username')} />\n       *    </div>\n       *  )\n       */\n\n    }, {\n      key: 'changeHandler',\n      value: function changeHandler(valuePath) {\n        var _this7 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return function (firstArg, secondArg, thirdArg) {\n          _this7.changeValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n      /**\n       * Updates an attribute with a new value\n       *\n       * @param {String} valuePath A path pointing to the attribute to update\n       * @param {*} value The new value to update the attribute to.\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * render() {\n       *   const { user: { username } } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username} onChange={this.handleUsernameChange} />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleUsernameChange(event, newUsername){\n       *   const { changeValue } = this.props;\n       *\n       *   // custom code here\n       *   changeValue('username', newUsername)\n       * }\n       */\n\n    }, {\n      key: 'changeValue',\n      value: function changeValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        invariant(!Array.isArray(valuePath), 'Value path passed to changeValue was an array. If you want to change multiple values at once, use `changeValues` (pluralized) instead.');\n        this.changeValues([[valuePath, value]], options);\n      }\n      /**\n       * Returns a function that, when called, updates multiple attributes with new values\n       *\n       * @param {Array.<Array.<String|*>>} changes An array of path and new value tuples\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the\n       *        attributes with the value specified in the changes list\n       *\n       * @example\n       * return(\n       *  <button onChange={changesHandler([['username', ''], ['password', '']])}   >\n       *    Clear\n       *  </button>\n       * )\n       */\n\n    }, {\n      key: 'changesHandler',\n      value: function changesHandler(changes) {\n        var _this8 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return function () {\n          _this8.changeValues(changes, options);\n        };\n      }\n      /**\n       * Updates multiple attributes with new values\n       *\n       * @param {Array.<Array.<String|*>>} changes An array of path and new value tuples\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * render() {\n       *   return(\n       *     <div>\n       *       <button onChange={this.handleClearValues} >\n       *         Clear\n       *       </button>\n       *     </div>\n       *   )\n       * }\n       *\n       * handleClearValues(event){\n       *   const { changeValues } = this.props;\n       *\n       *   // custom code here\n       *   changeValues([ ['username', ''], ['password', ''] ])\n       * }\n       */\n\n    }, {\n      key: 'changeValues',\n      value: function changeValues(changes) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            _ref2$validate = _ref2.validate,\n            validate = _ref2$validate === undefined ? false : _ref2$validate,\n            _ref2$callback = _ref2.callback,\n            callback = _ref2$callback === undefined ? emptyFunc : _ref2$callback;\n\n        invariant(Array.isArray(changes), 'Changes must be an array of path-value pairs');\n\n        if (validate) {\n          var validatePaths = function () {\n            if (validate === true) {\n              return map(changes, function (_ref3) {\n                var _ref4 = slicedToArray(_ref3, 1),\n                    valuePath = _ref4[0];\n\n                return valuePath;\n              });\n            } else {\n              return validate;\n            }\n          }();\n\n          var nextState = this._newState({\n            validatePaths: validatePaths,\n            changes: changes\n          });\n\n          this._validate(nextState, callback);\n        } else {\n          var _nextState = this._newState({\n            changes: changes\n          });\n\n          this.setState(_nextState);\n        }\n      }\n      /**\n       * Returns a function that, when called, validates all values currently in the\n       * validation component's state (including values set by defaultProps and passed\n       * in as props).\n       *\n       * @param {Function?} callback Function to call once the validation has been\n       *        completed and any error messages set.\n       * @returns {function()} Function that, when called, will validate all values\n       *\n       * @example\n       * render() {\n       *   const { user: { username }, changeHandler, validateAllHandler } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username}\n       *         onChange={changeHandler('username')}\n       *       />\n       *\n       *       <input type=\"submit\" onClick={validateAllHandler(this.handleValidation)} />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleValidation(){\n       *   const { errors } = this.props;\n       *\n       *   if (!any(errors)) {\n       *     // navigate away\n       *   }\n       * }\n       */\n\n    }, {\n      key: 'validateAllHandler',\n      value: function validateAllHandler() {\n        var _this9 = this;\n\n        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyFunc;\n        return function () {\n          _this9.validateAll(callback);\n        };\n      }\n      /**\n       * Validates all values currently in the validation component's state\n       * (including values set by defaultProps and passed in as props).\n       *\n       * @param {Function?} callback Function to call once the validation has been\n       *        completed and any error messages set.\n       *\n       * @example\n       * render() {\n       *   const { user: { username }, changeHandler } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username}\n       *         onChange={changeHandler('username')}\n       *       />\n       *\n       *       <input type=\"submit\" onClick={this.handleValidation} />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleValidation(){\n       *   const { validateAll } = this.props;\n       *\n       *   // custom code here\n       *\n       *   validateAll(() => {\n       *     const { errors } = this.props;\n       *\n       *     if (!any(errors)) {\n       *       // navigate away\n       *     }\n       *   });\n       * }\n       */\n\n    }, {\n      key: 'validateAll',\n      value: function validateAll(callback) {\n        this._validate(_extends({}, this.state, {\n          validateAllValues: true\n        }), callback);\n      }\n      /**\n       * Returns a function that, when called, validates some of the values currently\n       * in the validation component's state (including values set by defaultProps\n       * and passed in as props).\n       *\n       * @param {String|Array.<String>} validatePaths List of paths to values that will\n       *        be validated when the returned function is called\n       * @param {Function?} callback Function to call once the validation has been\n       *        completed and any error messages set.\n       * @returns {function()} Function that, when called, will validate the specified\n       *        values\n       *\n       * @example\n       * const { address: { country, postcode }, changeHandler, validateHandler } = this.props;\n       *\n       *     return(\n       *      <div>\n       *        <input value={postcode}\n       *            onChange={changeHandler('postcode')}\n       *        />\n       *\n       *        <input value={country}\n       *            onChange={changeHandler('country')}\n       *            onBlur={validateHandler(['postcode','country'])}\n       *        />\n       *      </div>\n       *     )\n       */\n\n    }, {\n      key: 'validateHandler',\n      value: function validateHandler(validatePaths) {\n        var _this10 = this;\n\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyFunc();\n        return function () {\n          _this10.validate(validatePaths, callback);\n        };\n      }\n      /**\n       * Validates some of the values currently in the validation component's state\n       * (including values set by defaultProps and passed in as props).\n       *\n       * @param {String|Array.<String>} validatePaths List of paths to values that will\n       *        be validated when the returned function is called\n       * @param {Function?} afterValidationCallback Function to call once the\n       *        validation has been completed and any error messages set.\n       *\n       * @example\n       * render() {\n       *   const { user: { username }, changeHandler } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username}\n       *         onChange={changeHandler('username')}\n       *         onBlur={this.handleUsernameValidation}\n       *       />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleUsernameValidation(event){\n       *   const { validate } = this.props;\n       *\n       *   // custom code here\n       *\n       *   validate('username')\n       * }\n       */\n\n    }, {\n      key: 'validate',\n      value: function validate(validatePaths) {\n        var afterValidationCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyFunc;\n\n        this._validate(this._newState({\n          validatePaths: validatePaths\n        }), afterValidationCallback);\n      }\n      /**\n       * Clears the validation state and resets values for some or all of the values\n       * being handled by the validator component.\n       *\n       * @param {String|Array.<String>?} paths A path, or a list of paths for which any\n       *      errors or values, should be reset to the default. If not provided, all values\n       *      and errors are reset to their default.\n       *\n       * @deprecated since v1.2.0. Use clearValidationAndResetValues(), instead\n       */\n\n    }, {\n      key: 'clearValidationState',\n      value: function clearValidationState(paths) {\n        console.warn('Deprecation Warning: clearValidationState is deprecated. Please use clearValidationAndResetValues() instead.');\n        this.clearValidationAndResetValues(paths);\n      }\n      /**\n       * Clears the validation state and resets values for some or all of the values\n       * being handled by the validator component.\n       *\n       * @param {String|Array.<String>?} paths A path, or a list of paths for which any\n       *      errors or values, should be reset to the default. If not provided, all values\n       *      and errors are reset to their default.\n       *\n       * @example\n       * handleValidation(){\n       *   const { validateAll } = this.props;\n       *\n       *   // custom code here\n       *\n       *   validateAll(() => {\n       *     const { errors, clearValidationAndResetValues } = this.props;\n       *\n       *     if (!any(errors)) {\n       *       // send to your store or server\n       *\n       *       this.clearValidationAndResetValues()\n       *     }\n       *   });\n       * }\n       */\n\n    }, {\n      key: 'clearValidationAndResetValues',\n      value: function clearValidationAndResetValues(paths) {\n        if (paths) {\n          var _state2 = this.state,\n              touchedValues = _state2.touchedValues,\n              validatedValues = _state2.validatedValues,\n              values = _state2.values;\n          var pathList = arrayFrom(paths);\n          var newTouchedValues = deepClone(touchedValues);\n          var newValidatedValues = deepClone(validatedValues);\n          var newValues = deepClone(values);\n          each(pathList, function (path) {\n            unset(newTouchedValues, path);\n            unset(newValidatedValues, path);\n            unset(newValues, path);\n          });\n          this.setState({\n            touchedValues: newTouchedValues,\n            validatedValues: newValidatedValues,\n            values: newValues\n          });\n        } else {\n          this.setState(_extends({}, DEFAULT_STATE));\n        }\n      }\n      /**\n       * Clears the validation state for some or all of the values being handled by\n       * the validator component. The actual values are NOT reset.\n       *\n       * @param {String|Array.<String>?} paths A path, or a list of paths for which any\n       *      values should be reset to the default. If not provided, all values\n       *      and errors are reset to their default.\n       *\n       * @example\n       * handleValidation() {\n       *   const { clearValidation, overrideValidation } = this.props;\n       *\n       *   if (overrideValidation) {\n       *     clearValidation(); // or clearValidation('user.username')\n       *   }\n       * }\n       */\n\n    }, {\n      key: 'clearValidation',\n      value: function clearValidation(paths) {\n        if (paths) {\n          var validatedValues = this.state.validatedValues;\n          var newValidatedValues = deepClone(validatedValues);\n          var pathList = arrayFrom(paths);\n          each(pathList, function (path) {\n            unset(newValidatedValues, path);\n          });\n          this.setState({\n            validatedValues: newValidatedValues,\n            validateAllValues: false\n          });\n        } else {\n          this.setState({\n            validatedValues: deepClone(DEFAULT_STATE.validatedValues),\n            validateAllValues: false\n          });\n        }\n      }\n      /**\n       * Clears the record of which values have been touched, i.e. the values that\n       * the validated component has updated or validated using any of the functions the\n       * validator component provides\n       */\n\n    }, {\n      key: 'clearTouchedValues',\n      value: function clearTouchedValues() {\n        this.setState({\n          touchedValues: {},\n          validateAllValues: false\n        });\n      }\n    }, {\n      key: '_addValue',\n      value: function _addValue(position, valuePath, value, options) {\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        var newValue = function () {\n          if (options.allowDuplicates === false && currentValue.indexOf(value) !== -1) {\n            return currentValue;\n          }\n\n          if (position === 'start') {\n            return [value].concat(toConsumableArray(currentValue));\n          } else {\n            return [].concat(toConsumableArray(currentValue), [value]);\n          }\n        }();\n\n        this.changeValue(valuePath, newValue, options);\n      }\n    }, {\n      key: '_newState',\n      value: function _newState(_ref5) {\n        var validatePaths = _ref5.validatePaths,\n            changes = _ref5.changes;\n        var _state3 = this.state,\n            validatedValues = _state3.validatedValues,\n            touchedValues = _state3.touchedValues,\n            values = _state3.values;\n        var newValues = deepClone(values);\n        var newTouchedValues = deepClone(touchedValues);\n        var changingValues = [];\n\n        if (changes) {\n          each(changes, function (_ref6) {\n            var _ref7 = slicedToArray(_ref6, 2),\n                path = _ref7[0],\n                value = _ref7[1];\n\n            set(newValues, path, value);\n            set(newTouchedValues, path, path);\n            changingValues.push(path);\n          });\n        }\n\n        var newValidatedValues = function () {\n          if (validatePaths) {\n            var valuePathsList = arrayFrom(validatePaths);\n            return mergeValidatedValuePaths(valuePathsList, validatedValues);\n          } else {\n            return validatedValues;\n          }\n        }();\n\n        return _extends({}, this.state, {\n          values: newValues,\n          touchedValues: newTouchedValues,\n          validatedValues: newValidatedValues,\n          changingValues: changingValues\n        });\n      }\n    }, {\n      key: '_omitDeep',\n      value: function _omitDeep(target, valueToOmit) {\n        var _this11 = this;\n\n        if (valueToOmit) {\n          if (isPlainObject(target)) {\n            return reduce(target, function (memo, value, key) {\n              if (!isString(valueToOmit[key])) {\n                memo[key] = _this11._omitDeep(value, valueToOmit[key]);\n              }\n\n              return memo;\n            }, {});\n          } else if (Array.isArray(target)) {\n            return reduce(target, function (memo, value, index) {\n              if (!isString(valueToOmit[index])) {\n                memo.push(_this11._omitDeep(value, valueToOmit[index]));\n              }\n\n              return memo;\n            }, []);\n          } else {\n            return target;\n          }\n        } else {\n          return target;\n        }\n      }\n    }, {\n      key: '_getActiveErrors',\n      value: function _getActiveErrors() {\n        var _state4 = this.state,\n            errors = _state4.errors,\n            validateAllValues = _state4.validateAllValues,\n            touchedValues = _state4.touchedValues,\n            validatedValues = _state4.validatedValues;\n        var externalErrors = get(this.props, externalErrorsPath || 'errors', {});\n\n        var baseErrors = this._omitDeep(externalErrors, touchedValues);\n\n        if (validateAllValues) {\n          return defaultsDeep({}, errors, baseErrors);\n        } else {\n          return defaultsDeep(pickErrors(errors, validatedValues), baseErrors);\n        }\n      }\n    }, {\n      key: '_valuesWithDefaults',\n      value: function _valuesWithDefaults(_ref8) {\n        var _this12 = this;\n\n        var values = _ref8.values,\n            touchedValues = _ref8.touchedValues;\n\n        if (only) {\n          var validateableFields = arrayFrom(only);\n          var propValues = reduce(validateableFields, function (memo, path) {\n            var pathSegments = path.split(/[.[]/);\n            /**\n             * When using a complex or nested path for the 'only' option, we need\n             * to copy the root object - not just the leaf node - to ensure attributes\n             * in that root object that are not being validated, aren't omitted when\n             * it comes time to (deeply) merge in the validated values\n             */\n\n            var pathRoot = pathSegments.length > 1 ? pathSegments[0] : path;\n            var sourceValue = get(_this12.props, pathRoot);\n            set(memo, pathRoot, sourceValue);\n            return memo;\n          }, {});\n          var defaultValues = pickDeep(ValidatedComponent.defaultProps, validateableFields);\n          var propsWithDefaults = defaultsDeep({}, propValues, defaultValues);\n          return valuesWithDefaultsAndExemptions({\n            defaultValue: propsWithDefaults,\n            overrides: wrapObject(values),\n            deepMergeExemptions: wrapObject(touchedValues)\n          });\n        } else {\n          var _propsWithDefaults = defaultsDeep({}, this.props, ValidatedComponent.defaultProps);\n\n          return valuesWithDefaultsAndExemptions({\n            defaultValue: _propsWithDefaults,\n            overrides: wrapObject(values),\n            deepMergeExemptions: wrapObject(touchedValues)\n          });\n        }\n      }\n    }, {\n      key: '_getCurrentValue',\n      value: function _getCurrentValue(path) {\n        return get(unwrapObject(this._valuesWithDefaults(this.state)), path);\n      }\n    }, {\n      key: '_validate',\n      value: function _validate(nextState, afterValidationCallback) {\n        var _this13 = this;\n\n        var afterValidationHandler = this._afterValidationHandler(nextState, afterValidationCallback);\n\n        var valuesWithDefaults = unwrapObject(this._valuesWithDefaults(nextState));\n\n        var validatorOptions = _extends({}, nextState, {\n          valuesWithDefaults: valuesWithDefaults,\n          touchedValues: pickOutermost(nextState.touchedValues),\n          validatedValues: pickOutermost(nextState.validatedValues),\n          props: _extends({}, this.props)\n        });\n\n        if (joiSchema) {\n          Joi.validate(valuesWithDefaults, joiSchema, _extends({\n            abortEarly: false\n          }, joiOptions), function (joiError) {\n            var joiErrorList = joiError && joiError.details || [];\n            var errors = reduce(joiErrorList, function (joiErrors, _ref9) {\n              var message = _ref9.message,\n                  path = _ref9.path;\n              var messageWithFieldNameRemoved = message.replace(/^\".+\" /, '');\n              set(joiErrors, path, messageWithFieldNameRemoved);\n              return joiErrors;\n            }, {});\n\n            _this13._callValidatorIfDefined(arrayFrom(validator), _extends({}, validatorOptions, {\n              errors: errors\n            }), afterValidationHandler);\n          });\n        } else {\n          this._callValidatorIfDefined(arrayFrom(validator), _extends({}, validatorOptions, {\n            errors: {}\n          }), afterValidationHandler);\n        }\n      }\n    }, {\n      key: '_callValidatorIfDefined',\n      value: function _callValidatorIfDefined(validatorList, validatorOptions, afterValidatorHasRun) {\n        var _this14 = this;\n\n        if (validatorList.length > 0) {\n          var callback = function () {\n            if (validatorList.length > 1) {\n              return function (_ref10) {\n                var values = _ref10.values,\n                    errors = _ref10.errors;\n\n                _this14._callValidatorIfDefined(drop(validatorList), _extends({}, validatorOptions, {\n                  values: values,\n                  errors: errors\n                }), afterValidatorHasRun);\n              };\n            } else {\n              return afterValidatorHasRun;\n            }\n          }();\n\n          validatorList[0](validatorOptions, callback);\n        } else {\n          var values = validatorOptions.values,\n              errors = validatorOptions.errors;\n          afterValidatorHasRun({\n            values: values,\n            errors: errors\n          });\n        }\n      }\n    }, {\n      key: '_afterValidationHandler',\n      value: function _afterValidationHandler(nextState, afterValidationComplete) {\n        var _this15 = this;\n\n        return function (_ref11) {\n          var errors = _ref11.errors,\n              values = _ref11.values;\n\n          var newState = _extends({}, nextState, {\n            errors: errors,\n            values: values\n          });\n\n          _this15.setState(newState, afterValidationComplete);\n        };\n      }\n    }]);\n    return ValidatorComponent;\n  }(React.Component);\n\n  return ValidatorComponent;\n};\n\nReactJoiValidation.setJoi = function (joiClass) {\n  Joi = joiClass;\n};\n\nReactJoiValidation.setChangeHandlerStrategy = function (changeHandlerStrategy) {\n  defaultChangeHandlerStrategy = changeHandlerStrategy;\n};\n\nexports.guessCorrectValue = guessCorrectValue;\nexports.useEventTargetValue = useEventTargetValue;\nexports.useFirstArgument = useFirstArgument;\nexports.useSecondArgument = useSecondArgument;\nexports.useThirdArgument = useThirdArgument;\nexports.default = ReactJoiValidation;","map":{"version":3,"sources":["/Users/marijnvanloo/Documents/Projects .nosync/huureenarts.nl_react/client/node_modules/react-joi-validation/cjs/react-joi-validation.development.js"],"names":["Object","defineProperty","exports","value","_interopDefault","ex","get","require","set","reduce","isPlainObject","each","toPath","isString","deepClone","isUndefined","unique","keys","map","React","React__default","unset","drop","has","defaultsDeep","invariant","emptyFunc","arrayFrom","target","Array","isArray","pickDeep","source","paths","memo","path","sourceValue","pickOutermost","list","arguments","length","undefined","subValue","element","push","isNumberString","string","isNaN","Wildcard","extendAnyTouchedAncestors","pathSegments","ancestorPathSegments","touchedAncestorPathSegments","newPathNode","nextPathSegment","index","thisPathSegments","slice","thisValue","mergeValidatedValuePaths","newTouchedValuePaths","previouslyTouchedValues","updatedTouchedValues","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","props","i","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_extends","assign","hasOwnProperty","call","inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_i","Symbol","iterator","_s","next","done","err","toConsumableArray","arr2","from","valueAlreadyTouched","valuesWithDefaultsAndExemptions","_ref","_ref$deepMergeExempti","deepMergeExemptions","overrides","defaultValue","unionOfObjectKeys","concat","overridesIsLongerThanDefault","overrideElement","defaultValueElement","Joi","DEFAULT_STATE","errors","values","touchedValues","validatedValues","changingValues","validateAllValues","guessCorrectValue","event","eventTargetValue","useEventTargetValue","useFirstArgument","useSecondArgument","arg1","useThirdArgument","arg2","defaultChangeHandlerStrategy","ReactJoiValidation","ValidatedComponent","joiSchema","joiOptions","validator","only","_ref$pseudoValues","pseudoValues","externalErrorsPath","changeHandlerStrategy","usingSingularValidationScope","wrapObject","object","unwrapObject","pickErrors","listOfTouchedValues","valuesToPick","activeErrors","valuePath","endsWith","error","getValueToUse","options","firstArg","secondArg","thirdArg","strategy","ValidatorComponent","_Component","context","_this","getPrototypeOf","changeHandler","bind","changesHandler","changeValue","changeValues","pushHandler","pushValue","togglePushHandler","togglePushValue","unshiftHandler","unshiftValue","toggleUnshiftHandler","toggleUnshiftValue","pullHandler","pullValue","validateHandler","validate","validateAll","validateAllHandler","clearValidation","clearValidationState","clearValidationAndResetValues","clearTouchedValues","state","render","_state","createElement","_valuesWithDefaults","_getActiveErrors","clearValidationTouchedValues","_this2","_addValue","_this3","currentValue","_getCurrentValue","indexOf","allowDuplicates","removeAllInstances","_this4","_this5","_this6","finalValue","_this7","changes","_this8","_ref2","_ref2$validate","_ref2$callback","callback","validatePaths","_ref3","_ref4","nextState","_newState","_validate","_nextState","setState","_this9","_this10","afterValidationCallback","console","warn","_state2","pathList","newTouchedValues","newValidatedValues","newValues","position","newValue","_ref5","_state3","_ref6","_ref7","valuePathsList","_omitDeep","valueToOmit","_this11","_state4","externalErrors","baseErrors","_ref8","_this12","validateableFields","propValues","split","pathRoot","defaultValues","defaultProps","propsWithDefaults","_propsWithDefaults","_this13","afterValidationHandler","_afterValidationHandler","valuesWithDefaults","validatorOptions","abortEarly","joiError","joiErrorList","details","joiErrors","_ref9","message","messageWithFieldNameRemoved","replace","_callValidatorIfDefined","validatorList","afterValidatorHasRun","_this14","_ref10","afterValidationComplete","_this15","_ref11","newState","Component","setJoi","joiClass","setChangeHandlerStrategy","default"],"mappings":"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","sourcesContent":["/**\n * ISC License\n *\n * Copyright (c) 2018, Aleck Greenham\n *\n * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar get = _interopDefault(require('lodash.get'));\nvar set = _interopDefault(require('lodash.set'));\nvar reduce = _interopDefault(require('lodash.reduce'));\nvar isPlainObject = _interopDefault(require('lodash.isplainobject'));\nvar each = _interopDefault(require('lodash.foreach'));\nvar toPath = _interopDefault(require('lodash.topath'));\nvar isString = _interopDefault(require('lodash.isstring'));\nvar deepClone = _interopDefault(require('lodash.clonedeep'));\nvar isUndefined = _interopDefault(require('lodash.isundefined'));\nvar unique = _interopDefault(require('lodash.uniq'));\nvar keys = _interopDefault(require('lodash.keys'));\nvar map = _interopDefault(require('lodash.map'));\nvar React = require('react');\nvar React__default = _interopDefault(React);\nvar unset = _interopDefault(require('lodash.unset'));\nvar drop = _interopDefault(require('lodash.drop'));\nvar has = _interopDefault(require('lodash.has'));\nvar defaultsDeep = _interopDefault(require('lodash.defaultsdeep'));\nvar invariant = _interopDefault(require('invariant'));\n\nfunction emptyFunc () {\n  // Noop\n}\n\nfunction arrayFrom (target) {\n  if (target) {\n\n    if (Array.isArray(target)) {\n      return target;\n    } else {\n      return [target];\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction pickDeep (source, paths) {\n  return reduce(paths, function (memo, path) {\n\n    var sourceValue = get(source, path);\n    set(memo, path, sourceValue);\n\n    return memo;\n  }, {});\n}\n\nfunction pickOutermost(target) {\n  var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n\n  if (isPlainObject(target)) {\n\n    each(target, function (subValue) {\n      pickOutermost(subValue, list);\n    });\n  } else if (Array.isArray(target)) {\n\n    each(target, function (element) {\n      pickOutermost(element, list);\n    });\n  } else {\n\n    if (target) {\n      list.push(target);\n    }\n  }\n\n  return list;\n}\n\nfunction isNumberString(string) {\n  return !isNaN(+string);\n}\n\nvar Wildcard = '*';\n\nfunction extendAnyTouchedAncestors(target, path) {\n  var pathSegments = toPath(path);\n\n  var ancestorPathSegments = touchedAncestorPathSegments(target, pathSegments);\n\n  if (ancestorPathSegments) {\n\n    var newPathNode = function () {\n      var nextPathSegment = pathSegments[ancestorPathSegments.length];\n\n      if (isNumberString(nextPathSegment)) {\n        return [];\n      } else {\n        return {};\n      }\n    }();\n\n    newPathNode[Wildcard] = Wildcard;\n\n    set(target, ancestorPathSegments, newPathNode);\n  }\n}\n\nfunction touchedAncestorPathSegments(target, pathSegments) {\n\n  var index = 0;\n\n  while (index <= pathSegments.length) {\n    var thisPathSegments = pathSegments.slice(0, index + 1);\n\n    var thisValue = get(target, thisPathSegments);\n\n    if (isString(thisValue)) {\n      return thisPathSegments;\n    }\n\n    index++;\n  }\n}\n\nfunction mergeValidatedValuePaths(newTouchedValuePaths, previouslyTouchedValues) {\n\n  return reduce(newTouchedValuePaths, function (updatedTouchedValues, path) {\n\n    if (path !== Wildcard) {\n\n      extendAnyTouchedAncestors(updatedTouchedValues, path);\n\n      set(updatedTouchedValues, path, path);\n    }\n\n    return updatedTouchedValues;\n  }, deepClone(previouslyTouchedValues));\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nfunction valueAlreadyTouched(value) {\n  return isString(value) || value && value[Wildcard];\n}\n\nfunction valuesWithDefaultsAndExemptions(_ref) {\n  var _ref$deepMergeExempti = _ref.deepMergeExemptions,\n      deepMergeExemptions = _ref$deepMergeExempti === undefined ? {} : _ref$deepMergeExempti,\n      overrides = _ref.overrides,\n      defaultValue = _ref.defaultValue;\n\n\n  if (valueAlreadyTouched(deepMergeExemptions) || isUndefined(defaultValue)) {\n\n    return overrides;\n  } else {\n\n    if (isUndefined(overrides)) {\n\n      return defaultValue;\n    } else {\n\n      if (isPlainObject(overrides)) {\n\n        var unionOfObjectKeys = unique([].concat(toConsumableArray(keys(defaultValue)), toConsumableArray(keys(overrides))));\n\n        return reduce(unionOfObjectKeys, function (memo, key) {\n\n          if (valueAlreadyTouched(deepMergeExemptions[key])) {\n\n            memo[key] = overrides[key];\n          } else {\n\n            memo[key] = valuesWithDefaultsAndExemptions({\n              defaultValue: defaultValue[key],\n              overrides: overrides[key],\n              deepMergeExemptions: deepMergeExemptions[key]\n            });\n          }\n\n          return memo;\n        }, {});\n      } else if (Array.isArray(overrides)) {\n\n        var overridesIsLongerThanDefault = overrides.length > defaultValue.length;\n\n        if (overridesIsLongerThanDefault) {\n\n          return map(overrides, function (overrideElement, index) {\n\n            if (valueAlreadyTouched(deepMergeExemptions[index])) {\n\n              return overrideElement;\n            } else {\n\n              return valuesWithDefaultsAndExemptions({\n                defaultValue: defaultValue[index],\n                overrides: overrideElement,\n                deepMergeExemptions: deepMergeExemptions[index]\n              });\n            }\n          });\n        } else {\n\n          return map(defaultValue, function (defaultValueElement, index) {\n\n            if (valueAlreadyTouched(deepMergeExemptions[index])) {\n\n              return overrides[index];\n            } else {\n\n              return valuesWithDefaultsAndExemptions({\n                defaultValue: defaultValueElement,\n                overrides: overrides[index],\n                deepMergeExemptions: deepMergeExemptions[index]\n              });\n            }\n          });\n        }\n      } else {\n\n        return overrides;\n      }\n    }\n  }\n}\n\nvar Joi = void 0;\n\nvar DEFAULT_STATE = {\n  errors: {},\n  values: {},\n  touchedValues: {},\n  validatedValues: {},\n  changingValues: [],\n\n  validateAllValues: false\n};\n\n/**\n * Takes arguments that resemble those commonly passed to event handlers and attempts\n * to guess what the desired event value should be. This function is the default used\n * by all *Handler methods to extract values from events so that they can be set and\n * validated.\n * @param {*} event The first argument, assumed to be an event object but does not need\n*         to be.\n * @param {*} value The second argument, assumed to be the value of the event, but\n *        does not need to be.\n * @returns {*} The assumed event value\n */\nfunction guessCorrectValue(event, value) {\n\n  /**\n   * Inspect the callback arguments when the handler is called\n   */\n  var eventTargetValue = get(event, 'target.value');\n\n  if (eventTargetValue) {\n    // Use value from event object\n    return eventTargetValue;\n  } else {\n    // Use value provided as second argument\n    return value;\n  }\n}\n\n/**\n * Returns the target value of an event that is passed to it\n * @param {Event} event Event object for which the target value will be returned\n * @returns {*} The target value of the event passed as the first argument\n */\nfunction useEventTargetValue(event) {\n  return get(event, 'target.value');\n}\n\n/**\n * Returns the first argument. Used for adapting event handlers that return the event\n * value as the first argument.\n * @param {*} value First argument\n * @returns {*} The value of the first argument\n */\nfunction useFirstArgument(value) {\n  return value;\n}\n\n/**\n * Returns the second argument. Used for adapting event handlers that return the event\n * value as the second argument.\n * @param {*} arg1 The first argument\n * @param {*} value Second argument\n * @returns {*} The value of the second argument\n */\nfunction useSecondArgument(arg1, value) {\n  return value;\n}\n\n/**\n * Returns the third argument. Used for adapting event handlers that return the event\n * value as the third argument.\n * @param {*} arg1 The first argument\n * @param {*} arg2 The second argument\n * @param {*} value Third argument\n * @returns {*} The value of the third argument\n */\nfunction useThirdArgument(arg1, arg2, value) {\n  return value;\n}\n\nvar defaultChangeHandlerStrategy = guessCorrectValue;\n\n/**\n * Returns a validator component that wraps a validated component and provides\n * methods for updating and validating the validator component's state via the\n * validated component's props\n *\n * @param {Component} ValidatedComponent Component to wrap and provide the methods\n *        for updating and validating values as props\n * @param {Object.<String,*>} options A configuration hash\n * @param {Joi|Object?} options.joiSchema A Joi schema that, if provided, is used\n *        to validate the values stored in the validator component's state every time\n *        one of the validation methods are called.\n * @param {Object?} options.joiOptions Options that are passed to Joi on every\n *        validation attempt. See the documentation for the version of Joi that you\n *        are using.\n * @param {Function|Array.<Function>?} options.validator A function or array of\n *        functions to use to validate the values stored in the validator component's\n *        state every time one of the validate methods are called. Can be used in\n *        conjunction with the joiSchema option, or without it. If both are specified,\n *        the joiSchema validation is performed first and then the validators are\n *        called in the order that they appear in the array.\n * @param {String|Array.<String>?} options.only Path or paths to the part of the props\n *        object passed to the validator (and passed through to the validated\n *        object) that should be validated against the joi schema. Useful if you\n *        want to validate only part of the props.\n * @param {String|Array.<String>?} pseudoValues List of paths to values that aren't\n *        actually in the props passed to the validator component and are never set\n *        by the validated component, but are accessible to attach validation errors\n *        to, in validator functions.\n * @param {String=\"errors\"} externalErrorsPath Path to the attribute on props that\n *        stores the errors object of any validation performed outside of the\n *        validator component. These errors are merged into those set by the validator\n *        component.\n * @param {Function?} changeHandlerStrategy The default change handler strategy to\n *        use in the validator component. i.e. The default function that should be used\n *        to map the arguments of event handlers to the validation handlers', provided\n *        by the validator component. If unspecified, the default set at the package\n *        level using setChangeHandlerStrategy() is used, or the guessCorrectValue\n *        function if none has been otherwise specified.\n * @returns {ValidatorComponent} The validator component, that wrapping the validated\n *        component.\n */\n\nvar ReactJoiValidation = function ReactJoiValidation(ValidatedComponent, _ref) {\n  var joiSchema = _ref.joiSchema,\n      joiOptions = _ref.joiOptions,\n      validator = _ref.validator,\n      only = _ref.only,\n      _ref$pseudoValues = _ref.pseudoValues,\n      pseudoValues = _ref$pseudoValues === undefined ? [] : _ref$pseudoValues,\n      externalErrorsPath = _ref.externalErrorsPath,\n      changeHandlerStrategy = _ref.changeHandlerStrategy;\n\n  function usingSingularValidationScope() {\n    return isString(only);\n  }\n\n  function wrapObject(object) {\n    if (usingSingularValidationScope()) {\n      return set({}, only, object);\n    } else {\n      return object;\n    }\n  }\n\n  function unwrapObject(object) {\n    if (usingSingularValidationScope()) {\n      return get(object, only);\n    } else {\n      return object;\n    }\n  }\n\n  function pickErrors(errors, touchedValues) {\n\n    var listOfTouchedValues = pickOutermost(touchedValues);\n\n    var valuesToPick = [].concat(toConsumableArray(listOfTouchedValues), toConsumableArray(arrayFrom(pseudoValues)));\n\n    return reduce(valuesToPick, function (activeErrors, valuePath) {\n\n      if (!valuePath.endsWith(Wildcard)) {\n        var error = get(errors, valuePath);\n\n        if (error) {\n          set(activeErrors, valuePath, error);\n        }\n      }\n\n      return activeErrors;\n    }, {});\n  }\n\n  function getValueToUse(options, firstArg, secondArg, thirdArg) {\n    if (has(options, 'value')) {\n\n      /**\n       * Allow setting a fixed value at the time of binding the change\n       * handler and ignore whatever value is passed when the handler\n       * is called\n       */\n      return options.value;\n    } else {\n      return (options.strategy || changeHandlerStrategy || defaultChangeHandlerStrategy)(firstArg, secondArg, thirdArg);\n    }\n  }\n\n  /**\n   * @class ValidatorComponent Component class that renders its children with props\n   * that contain functions for updating and validating the values stored in the\n   * validator component's state.\n   */\n\n  var ValidatorComponent = function (_Component) {\n    inherits(ValidatorComponent, _Component);\n\n    /**\n     * Creates a new instance of a ValidatorComponent, binds all validation and\n     * update methods to that instance, and sets its default state.\n     *\n     * @param {Object.<*,*>} props Props that are passed through this\n     *        component to the validated component. All or part of these values\n     *        determine the initial values in the component's state, depending\n     *        on ReactJoiValidation's only option.\n     * @param {Object.<*,*>} context Context object for this component and the\n     *        validated component\n     *\n     * @see ReactJoiValidation\n     */\n    function ValidatorComponent(props, context) {\n      classCallCheck(this, ValidatorComponent);\n\n      var _this = possibleConstructorReturn(this, (ValidatorComponent.__proto__ || Object.getPrototypeOf(ValidatorComponent)).call(this, props, context));\n\n      _this.changeHandler = _this.changeHandler.bind(_this);\n      _this.changesHandler = _this.changesHandler.bind(_this);\n      _this.changeValue = _this.changeValue.bind(_this);\n      _this.changeValues = _this.changeValues.bind(_this);\n\n      _this.pushHandler = _this.pushHandler.bind(_this);\n      _this.pushValue = _this.pushValue.bind(_this);\n      _this.togglePushHandler = _this.togglePushHandler.bind(_this);\n      _this.togglePushValue = _this.togglePushValue.bind(_this);\n\n      _this.unshiftHandler = _this.unshiftHandler.bind(_this);\n      _this.unshiftValue = _this.unshiftValue.bind(_this);\n      _this.toggleUnshiftHandler = _this.toggleUnshiftHandler.bind(_this);\n      _this.toggleUnshiftValue = _this.toggleUnshiftValue.bind(_this);\n\n      _this.pullHandler = _this.pullHandler.bind(_this);\n      _this.pullValue = _this.pullValue.bind(_this);\n\n      _this.validateHandler = _this.validateHandler.bind(_this);\n      _this.validate = _this.validate.bind(_this);\n\n      _this.validateAll = _this.validateAll.bind(_this);\n      _this.validateAllHandler = _this.validateAllHandler.bind(_this);\n\n      _this.clearValidation = _this.clearValidation.bind(_this);\n      _this.clearValidationState = _this.clearValidationState.bind(_this);\n      _this.clearValidationAndResetValues = _this.clearValidationAndResetValues.bind(_this);\n      _this.clearTouchedValues = _this.clearTouchedValues.bind(_this);\n\n      _this.state = _extends({}, DEFAULT_STATE);\n      return _this;\n    }\n\n    /**\n     * Renders the validated component with all of the functions for updating and\n     * validating the validator component's state, as props. All props passed to the\n     * validator component are also passed through to the validated component.\n     *\n     * @returns {Component} The validated component, with the update and validation\n     *          props provided\n     */\n\n\n    createClass(ValidatorComponent, [{\n      key: 'render',\n      value: function render() {\n        var _state = this.state,\n            touchedValues = _state.touchedValues,\n            values = _state.values;\n\n\n        return React__default.createElement(ValidatedComponent, _extends({}, this.props, this._valuesWithDefaults({ values: values, touchedValues: touchedValues }), {\n\n          errors: this._getActiveErrors(),\n\n          changeHandler: this.changeHandler,\n          changesHandler: this.changesHandler,\n          changeValue: this.changeValue,\n          changeValues: this.changeValues,\n\n          pushHandler: this.pushHandler,\n          pushValue: this.pushValue,\n          togglePushHandler: this.togglePushHandler,\n          togglePushValue: this.togglePushValue,\n\n          unshiftHandler: this.unshiftHandler,\n          unshiftValue: this.unshiftValue,\n          toggleUnshiftHandler: this.toggleUnshiftHandler,\n          toggleUnshiftValue: this.toggleUnshiftValue,\n\n          pullHandler: this.pullHandler,\n          pullValue: this.pullValue,\n\n          validateHandler: this.validateHandler,\n          validate: this.validate,\n\n          validateAllHandler: this.validateAllHandler,\n          validateAll: this.validateAll,\n\n          clearValidationState: this.clearValidationState,\n          clearValidation: this.clearValidation,\n          clearValidationAndResetValues: this.clearValidationAndResetValues,\n          clearValidationTouchedValues: this.clearTouchedValues\n        }));\n      }\n\n      /**\n       * Returns a function that, when called, pushes a value onto the end of an array\n       * stored in the validator component's state\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should push new values onto.\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {Boolean=true} options.allowDuplicates Whether or not to push a value\n       *        onto the array if it already appears in that array.\n       * @param {*?} options.value The value to push onto the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the array\n       *        at valuePath, according to the options provided\n       *\n       * @example\n       * render() {\n       *   const { pushHandler, cities } = this.props;\n       *\n       *   return(\n       *     [\"Paris\", \"New York City\", \"London\"].map((city) => {\n       *       return(\n       *         <input type='button' label={ \"Add \" + city } onClick={ pushHandler('cities') } />\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       */\n\n    }, {\n      key: 'pushHandler',\n      value: function pushHandler(valuePath) {\n        var _this2 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return function (firstArg, secondArg, thirdArg) {\n          _this2.pushValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n\n      /**\n       * Immediately pushes a value onto the end of an array\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should push new values onto.\n       * @param {*} value The value to push onto the end of the array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean=true} options.allowDuplicates Whether or not to push a value\n       *        onto the array if it already appears in that array.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * handleAddCity(city) {\n       *    const { pushValue, cities } = this.props;\n       *\n       *    if (cities.indexOf(city) === -1 ) {\n       *       pushValue('cities', city);\n       *    }\n       * }\n       *\n       */\n\n    }, {\n      key: 'pushValue',\n      value: function pushValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        this._addValue('end', valuePath, value, options);\n      }\n\n      /**\n       * Returns a function that, when called, pushes a value onto the end of an array\n       * if that value is not already in the array, otherwise it removes it. i.e. it\n       * toggles that value's inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should push new values onto.\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {*?} options.value The value to toggle in the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will toggle the\n       *        inclusion or exclusion of a value in the array at at valuePath\n       *\n       * @example\n       * render() {\n       *   const { togglePushHandler, cities } = this.props;\n       *\n       *   return(\n       *     [\"Paris\", \"New York City\", \"London\"].map((city) => {\n       *       return(\n       *         <label>\n       *            <input type='checkbox' onClick={ togglePushHandler('cities') } />\n       *            { city }\n       *         </label>\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       */\n\n    }, {\n      key: 'togglePushHandler',\n      value: function togglePushHandler(valuePath) {\n        var _this3 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return function (firstArg, secondArg, thirdArg) {\n          _this3.togglePushValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n\n      /**\n       * Immediately pushes a value onto the end of an array if that value is not\n       * already in the array, otherwise it removes it. i.e. it toggles that value's\n       * inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should toggle the value.\n       * @param {*} value The value to toggle the inclusion or exclusion in array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * render() {\n       *   return(\n       *     [\"Paris\", \"New York City\", \"London\"].map((city) => {\n       *       return(\n       *         <label>\n       *             <input type='checkbox' onClick={ this.handleToggleCity('cities') } />\n       *             { city }\n       *         </label>\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       * handleToggleCity(city) {\n       *   const { togglePushHandler, cities } = this.props;\n       *\n       *   togglePushHandler('cities', city);\n       * }\n       *\n       */\n\n    }, {\n      key: 'togglePushValue',\n      value: function togglePushValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        if (currentValue.indexOf(value) === -1) {\n          this._addValue('end', valuePath, value, _extends({}, options, { allowDuplicates: false }));\n        } else {\n          this.pullValue(valuePath, value, _extends({}, options, { removeAllInstances: true }));\n        }\n      }\n\n      /**\n       * Similar to pushValueHandler, but the returned function, when called,\n       * adds a value to the beginning of an array, instead\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should add a value to the beginning\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {Boolean=true} options.allowDuplicates Whether or not to unshift a value\n       *        onto the array if it already appears in that array.\n       * @param {*?} options.value The value to unshift onto the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the array\n       *        at valuePath, according to the options provided\n       *\n       * @see pushValueHandler\n       */\n\n    }, {\n      key: 'unshiftHandler',\n      value: function unshiftHandler(valuePath) {\n        var _this4 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return function (firstArg, secondArg, thirdArg) {\n          _this4.unshiftValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n\n      /**\n       * Similar to pushValue, but immediately adds a value to the beginning of an array\n       * instead\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should add a new values to the beginning.\n       * @param {*} value The value to add to the start of the array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean=true} options.allowDuplicates Whether or not to unshift a value\n       *        onto the array if it already appears in that array.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @see pushValue\n       */\n\n    }, {\n      key: 'unshiftValue',\n      value: function unshiftValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        this._addValue('start', valuePath, value, options);\n      }\n\n      /**\n       * Returns a function that, when called, adds a value to the beginning of an array\n       * if that value is not already in the array, otherwise it removes it. i.e. it\n       * toggles that value's inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should add new value to the start.\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {*?} options.value The value to toggle in the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will toggle the\n       *        inclusion or exclusion of a value in the array at at valuePath\n       *\n       * @see togglePushHandler\n       */\n\n    }, {\n      key: 'toggleUnshiftHandler',\n      value: function toggleUnshiftHandler(valuePath) {\n        var _this5 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return function (firstArg, secondArg, thirdArg) {\n          _this5.toggleUnshiftValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n\n      /**\n       * Immediately pushes a value to the beginning of an array if that value is not\n       * already in the array, otherwise it removes it. i.e. it toggles that value's\n       * inclusion in the array.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should toggle the value.\n       * @param {*} value The value to toggle the inclusion or exclusion in array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @see togglePushValue\n       */\n\n    }, {\n      key: 'toggleUnshiftValue',\n      value: function toggleUnshiftValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        if (currentValue.indexOf(value) === -1) {\n          this._addValue('start', valuePath, value, _extends({}, options, { allowDuplicates: false }));\n        } else {\n          this.pullValue(valuePath, value, _extends({}, options, { removeAllInstances: true }));\n        }\n      }\n\n      /**\n       * The opposite of pushHandler and unshiftHandler; returns a function that,\n       * when called, will remove one or more instances of a value from an array.\n       *\n       * The default behaviour is to remove only the first instance of the specified\n       * value from the array. i.e. the instance of the value with the lowest index.\n       *\n       * @param {String} valuePath A path pointing to the array value, for which the\n       *        function should remove the value.\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {*?} options.value The value to remove from the array when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Number} options.index If specified, the element at the corresponding\n       *        index position will be removed, regardless of the value passed to the\n       *        function.\n       * @param {Boolean=false} options.removeAllInstances If true, all instances of\n       *        the specified value are removed from the array - not just the first one.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used the value to remove from the array. Useful\n       *        for standardising different event handler argument signatures. The\n       *        package exports some common strategy functions for you to use, but\n       *        it is possible to use any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will remove the value\n       *        from the array at valuePath, according to the options provide\n       *\n       * @example\n       * render() {\n       *   const { pullHandler, cities } = this.props;\n       *\n       *   return(\n       *     cities.map((city, index) => {\n       *       return(\n       *         <input type='button' label={ \"Remove \" + city } onClick={ pullHandler('cities', { removeAllInstances: true }) } />\n       *       );\n       *     }\n       *   );\n       * }\n       */\n\n    }, {\n      key: 'pullHandler',\n      value: function pullHandler(valuePath) {\n        var _this6 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return function (firstArg, secondArg, thirdArg) {\n          _this6.pullValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n\n      /**\n       * The opposite of pushValue and unshiftValue; immediately removes a value from\n       * an array.\n       *\n       * The default behaviour is to remove only the first instance of the specified\n       * value from the array. i.e. the instance of the value with the lowest index.\n       *\n       * @param {String} valuePath A path pointing to the array, from which the\n       *        function should remove the specified value\n       * @param {*} value The value to remove from the array\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Number} options.index If specified, the element at the corresponding\n       *        index position will be removed, regardless of the value passed to the\n       *        function.\n       * @param {Boolean=false} options.removeAllInstances If true, all instances of\n       *        the specified value are removed from the array - not just the first one.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       *\n       * @see pushValue\n       *\n       * @example\n       * render() {\n       *   const { cities } = this.props;\n       *\n       *   return(\n       *     cities.map((city, index) => {\n       *       return(\n       *         <input type='button' label={ \"Remove \" + city } onClick={ this.handleRemoveCity } />\n       *       );\n       *     }\n       *   );\n       * }\n       *\n       * handleRemoveCity(city) {\n       *    const { pullValue, cities, user } = this.props;\n       *\n       *    if (user.isAdmin) {\n       *       pullValue('cities', city);\n       *    }\n       * }\n       */\n\n    }, {\n      key: 'pullValue',\n      value: function pullValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        var finalValue = function () {\n          if (options.removeAllInstances) {\n            return currentValue.reduce(function (memo, element) {\n              if (element !== value) {\n                memo.push(element);\n              }\n\n              return memo;\n            }, []);\n          } else {\n            invariant(!has(options, 'index') || typeof options.index === 'number', 'pullValue\\'s options.index must be a number; Received ' + options.index + ' instead');\n\n            var index = has(options, 'index') ? options.index : currentValue.indexOf(value);\n\n            if (index === -1) {\n              return currentValue;\n            } else {\n              return [].concat(toConsumableArray(currentValue.slice(0, index)), toConsumableArray(currentValue.slice(index + 1)));\n            }\n          }\n        }();\n\n        this.changeValue(valuePath, finalValue, options);\n      }\n\n      /**\n       * Returns a function that, when called, updates the specified attribute with\n       * a new value\n       *\n       * @param {String} valuePath A path pointing to the attribute to update\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {*?} options.value The new value to set when the function\n       *        is called. If not provided, the value will be determined by the\n       *        arguments passed to the function when it is called.\n       * @param {Function=guessCorrectValue} options.strategy A function that takes\n       *        the arguments passed to the function returned by this method, and returns\n       *        which one should be used as the new value. Useful for standardising\n       *        different event handler argument signatures. The package exports some\n       *        common strategy functions for you to use, but it is possible to use\n       *        any arbitrary function you like.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the\n       *        attribute at valuePath, according to the options provided\n       *\n       * @example\n       * const { user: { username }, changeHandler } = this.props;\n       *\n       *  return(\n       *    <div>\n       *      <input value={username} onChange={changeHandler('username')} />\n       *    </div>\n       *  )\n       */\n\n    }, {\n      key: 'changeHandler',\n      value: function changeHandler(valuePath) {\n        var _this7 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return function (firstArg, secondArg, thirdArg) {\n          _this7.changeValue(valuePath, getValueToUse(options, firstArg, secondArg, thirdArg), options);\n        };\n      }\n\n      /**\n       * Updates an attribute with a new value\n       *\n       * @param {String} valuePath A path pointing to the attribute to update\n       * @param {*} value The new value to update the attribute to.\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * render() {\n       *   const { user: { username } } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username} onChange={this.handleUsernameChange} />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleUsernameChange(event, newUsername){\n       *   const { changeValue } = this.props;\n       *\n       *   // custom code here\n       *   changeValue('username', newUsername)\n       * }\n       */\n\n    }, {\n      key: 'changeValue',\n      value: function changeValue(valuePath, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        invariant(!Array.isArray(valuePath), 'Value path passed to changeValue was an array. If you want to change multiple values at once, use `changeValues` (pluralized) instead.');\n\n        this.changeValues([[valuePath, value]], options);\n      }\n\n      /**\n       * Returns a function that, when called, updates multiple attributes with new values\n       *\n       * @param {Array.<Array.<String|*>>} changes An array of path and new value tuples\n       * @param {Object<String,*>?} options A hash of options that configure how the\n       *        returned function behaves.\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       * @returns {function(*=, *=, *=)} Function that when called, will update the\n       *        attributes with the value specified in the changes list\n       *\n       * @example\n       * return(\n       *  <button onChange={changesHandler([['username', ''], ['password', '']])}   >\n       *    Clear\n       *  </button>\n       * )\n       */\n\n    }, {\n      key: 'changesHandler',\n      value: function changesHandler(changes) {\n        var _this8 = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return function () {\n          _this8.changeValues(changes, options);\n        };\n      }\n\n      /**\n       * Updates multiple attributes with new values\n       *\n       * @param {Array.<Array.<String|*>>} changes An array of path and new value tuples\n       * @param {Object<String,*>?} options A hash of configuration options\n       * @param {Boolean|String|Array.<String>?} options.validate Whether to validate\n       *        the value once it has been set. If true, then the value is validated\n       *        after it has been set. If set to a string, the value at the path pointed\n       *        to by the string is validated instead of the value being set. If set\n       *        to an array of strings, each of the values pointed to by the path in\n       *        each string is validated instead of the value being set.\n       * @param {Function?} options.callback A function to call once the value has been\n       *        set and any validation has been completed.\n       *\n       * @example\n       * render() {\n       *   return(\n       *     <div>\n       *       <button onChange={this.handleClearValues} >\n       *         Clear\n       *       </button>\n       *     </div>\n       *   )\n       * }\n       *\n       * handleClearValues(event){\n       *   const { changeValues } = this.props;\n       *\n       *   // custom code here\n       *   changeValues([ ['username', ''], ['password', ''] ])\n       * }\n       */\n\n    }, {\n      key: 'changeValues',\n      value: function changeValues(changes) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            _ref2$validate = _ref2.validate,\n            validate = _ref2$validate === undefined ? false : _ref2$validate,\n            _ref2$callback = _ref2.callback,\n            callback = _ref2$callback === undefined ? emptyFunc : _ref2$callback;\n\n        invariant(Array.isArray(changes), 'Changes must be an array of path-value pairs');\n\n        if (validate) {\n\n          var validatePaths = function () {\n            if (validate === true) {\n              return map(changes, function (_ref3) {\n                var _ref4 = slicedToArray(_ref3, 1),\n                    valuePath = _ref4[0];\n\n                return valuePath;\n              });\n            } else {\n              return validate;\n            }\n          }();\n\n          var nextState = this._newState({ validatePaths: validatePaths, changes: changes });\n\n          this._validate(nextState, callback);\n        } else {\n          var _nextState = this._newState({ changes: changes });\n\n          this.setState(_nextState);\n        }\n      }\n\n      /**\n       * Returns a function that, when called, validates all values currently in the\n       * validation component's state (including values set by defaultProps and passed\n       * in as props).\n       *\n       * @param {Function?} callback Function to call once the validation has been\n       *        completed and any error messages set.\n       * @returns {function()} Function that, when called, will validate all values\n       *\n       * @example\n       * render() {\n       *   const { user: { username }, changeHandler, validateAllHandler } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username}\n       *         onChange={changeHandler('username')}\n       *       />\n       *\n       *       <input type=\"submit\" onClick={validateAllHandler(this.handleValidation)} />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleValidation(){\n       *   const { errors } = this.props;\n       *\n       *   if (!any(errors)) {\n       *     // navigate away\n       *   }\n       * }\n       */\n\n    }, {\n      key: 'validateAllHandler',\n      value: function validateAllHandler() {\n        var _this9 = this;\n\n        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyFunc;\n\n\n        return function () {\n          _this9.validateAll(callback);\n        };\n      }\n\n      /**\n       * Validates all values currently in the validation component's state\n       * (including values set by defaultProps and passed in as props).\n       *\n       * @param {Function?} callback Function to call once the validation has been\n       *        completed and any error messages set.\n       *\n       * @example\n       * render() {\n       *   const { user: { username }, changeHandler } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username}\n       *         onChange={changeHandler('username')}\n       *       />\n       *\n       *       <input type=\"submit\" onClick={this.handleValidation} />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleValidation(){\n       *   const { validateAll } = this.props;\n       *\n       *   // custom code here\n       *\n       *   validateAll(() => {\n       *     const { errors } = this.props;\n       *\n       *     if (!any(errors)) {\n       *       // navigate away\n       *     }\n       *   });\n       * }\n       */\n\n    }, {\n      key: 'validateAll',\n      value: function validateAll(callback) {\n        this._validate(_extends({}, this.state, { validateAllValues: true }), callback);\n      }\n\n      /**\n       * Returns a function that, when called, validates some of the values currently\n       * in the validation component's state (including values set by defaultProps\n       * and passed in as props).\n       *\n       * @param {String|Array.<String>} validatePaths List of paths to values that will\n       *        be validated when the returned function is called\n       * @param {Function?} callback Function to call once the validation has been\n       *        completed and any error messages set.\n       * @returns {function()} Function that, when called, will validate the specified\n       *        values\n       *\n       * @example\n       * const { address: { country, postcode }, changeHandler, validateHandler } = this.props;\n       *\n       *     return(\n       *      <div>\n       *        <input value={postcode}\n       *            onChange={changeHandler('postcode')}\n       *        />\n       *\n       *        <input value={country}\n       *            onChange={changeHandler('country')}\n       *            onBlur={validateHandler(['postcode','country'])}\n       *        />\n       *      </div>\n       *     )\n       */\n\n    }, {\n      key: 'validateHandler',\n      value: function validateHandler(validatePaths) {\n        var _this10 = this;\n\n        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyFunc();\n\n\n        return function () {\n          _this10.validate(validatePaths, callback);\n        };\n      }\n\n      /**\n       * Validates some of the values currently in the validation component's state\n       * (including values set by defaultProps and passed in as props).\n       *\n       * @param {String|Array.<String>} validatePaths List of paths to values that will\n       *        be validated when the returned function is called\n       * @param {Function?} afterValidationCallback Function to call once the\n       *        validation has been completed and any error messages set.\n       *\n       * @example\n       * render() {\n       *   const { user: { username }, changeHandler } = this.props;\n       *\n       *   return(\n       *     <div>\n       *       <input value={username}\n       *         onChange={changeHandler('username')}\n       *         onBlur={this.handleUsernameValidation}\n       *       />\n       *     </div>\n       *   )\n       * }\n       *\n       * handleUsernameValidation(event){\n       *   const { validate } = this.props;\n       *\n       *   // custom code here\n       *\n       *   validate('username')\n       * }\n       */\n\n    }, {\n      key: 'validate',\n      value: function validate(validatePaths) {\n        var afterValidationCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyFunc;\n\n        this._validate(this._newState({ validatePaths: validatePaths }), afterValidationCallback);\n      }\n\n      /**\n       * Clears the validation state and resets values for some or all of the values\n       * being handled by the validator component.\n       *\n       * @param {String|Array.<String>?} paths A path, or a list of paths for which any\n       *      errors or values, should be reset to the default. If not provided, all values\n       *      and errors are reset to their default.\n       *\n       * @deprecated since v1.2.0. Use clearValidationAndResetValues(), instead\n       */\n\n    }, {\n      key: 'clearValidationState',\n      value: function clearValidationState(paths) {\n        console.warn('Deprecation Warning: clearValidationState is deprecated. Please use clearValidationAndResetValues() instead.');\n\n        this.clearValidationAndResetValues(paths);\n      }\n\n      /**\n       * Clears the validation state and resets values for some or all of the values\n       * being handled by the validator component.\n       *\n       * @param {String|Array.<String>?} paths A path, or a list of paths for which any\n       *      errors or values, should be reset to the default. If not provided, all values\n       *      and errors are reset to their default.\n       *\n       * @example\n       * handleValidation(){\n       *   const { validateAll } = this.props;\n       *\n       *   // custom code here\n       *\n       *   validateAll(() => {\n       *     const { errors, clearValidationAndResetValues } = this.props;\n       *\n       *     if (!any(errors)) {\n       *       // send to your store or server\n       *\n       *       this.clearValidationAndResetValues()\n       *     }\n       *   });\n       * }\n       */\n\n    }, {\n      key: 'clearValidationAndResetValues',\n      value: function clearValidationAndResetValues(paths) {\n        if (paths) {\n          var _state2 = this.state,\n              touchedValues = _state2.touchedValues,\n              validatedValues = _state2.validatedValues,\n              values = _state2.values;\n\n\n          var pathList = arrayFrom(paths);\n          var newTouchedValues = deepClone(touchedValues);\n          var newValidatedValues = deepClone(validatedValues);\n          var newValues = deepClone(values);\n\n          each(pathList, function (path) {\n            unset(newTouchedValues, path);\n            unset(newValidatedValues, path);\n            unset(newValues, path);\n          });\n\n          this.setState({\n            touchedValues: newTouchedValues,\n            validatedValues: newValidatedValues,\n            values: newValues\n          });\n        } else {\n          this.setState(_extends({}, DEFAULT_STATE));\n        }\n      }\n\n      /**\n       * Clears the validation state for some or all of the values being handled by\n       * the validator component. The actual values are NOT reset.\n       *\n       * @param {String|Array.<String>?} paths A path, or a list of paths for which any\n       *      values should be reset to the default. If not provided, all values\n       *      and errors are reset to their default.\n       *\n       * @example\n       * handleValidation() {\n       *   const { clearValidation, overrideValidation } = this.props;\n       *\n       *   if (overrideValidation) {\n       *     clearValidation(); // or clearValidation('user.username')\n       *   }\n       * }\n       */\n\n    }, {\n      key: 'clearValidation',\n      value: function clearValidation(paths) {\n\n        if (paths) {\n          var validatedValues = this.state.validatedValues;\n\n          var newValidatedValues = deepClone(validatedValues);\n\n          var pathList = arrayFrom(paths);\n\n          each(pathList, function (path) {\n            unset(newValidatedValues, path);\n          });\n\n          this.setState({\n            validatedValues: newValidatedValues,\n            validateAllValues: false\n          });\n        } else {\n\n          this.setState({\n            validatedValues: deepClone(DEFAULT_STATE.validatedValues),\n            validateAllValues: false\n          });\n        }\n      }\n\n      /**\n       * Clears the record of which values have been touched, i.e. the values that\n       * the validated component has updated or validated using any of the functions the\n       * validator component provides\n       */\n\n    }, {\n      key: 'clearTouchedValues',\n      value: function clearTouchedValues() {\n        this.setState({\n          touchedValues: {},\n          validateAllValues: false\n        });\n      }\n    }, {\n      key: '_addValue',\n      value: function _addValue(position, valuePath, value, options) {\n        var currentValue = this._getCurrentValue(valuePath) || [];\n\n        var newValue = function () {\n          if (options.allowDuplicates === false && currentValue.indexOf(value) !== -1) {\n            return currentValue;\n          }\n\n          if (position === 'start') {\n            return [value].concat(toConsumableArray(currentValue));\n          } else {\n            return [].concat(toConsumableArray(currentValue), [value]);\n          }\n        }();\n\n        this.changeValue(valuePath, newValue, options);\n      }\n    }, {\n      key: '_newState',\n      value: function _newState(_ref5) {\n        var validatePaths = _ref5.validatePaths,\n            changes = _ref5.changes;\n        var _state3 = this.state,\n            validatedValues = _state3.validatedValues,\n            touchedValues = _state3.touchedValues,\n            values = _state3.values;\n\n\n        var newValues = deepClone(values);\n        var newTouchedValues = deepClone(touchedValues);\n        var changingValues = [];\n\n        if (changes) {\n          each(changes, function (_ref6) {\n            var _ref7 = slicedToArray(_ref6, 2),\n                path = _ref7[0],\n                value = _ref7[1];\n\n            set(newValues, path, value);\n            set(newTouchedValues, path, path);\n            changingValues.push(path);\n          });\n        }\n\n        var newValidatedValues = function () {\n          if (validatePaths) {\n            var valuePathsList = arrayFrom(validatePaths);\n\n            return mergeValidatedValuePaths(valuePathsList, validatedValues);\n          } else {\n            return validatedValues;\n          }\n        }();\n\n        return _extends({}, this.state, {\n          values: newValues,\n          touchedValues: newTouchedValues,\n          validatedValues: newValidatedValues,\n          changingValues: changingValues\n        });\n      }\n    }, {\n      key: '_omitDeep',\n      value: function _omitDeep(target, valueToOmit) {\n        var _this11 = this;\n\n        if (valueToOmit) {\n          if (isPlainObject(target)) {\n\n            return reduce(target, function (memo, value, key) {\n\n              if (!isString(valueToOmit[key])) {\n                memo[key] = _this11._omitDeep(value, valueToOmit[key]);\n              }\n\n              return memo;\n            }, {});\n          } else if (Array.isArray(target)) {\n\n            return reduce(target, function (memo, value, index) {\n\n              if (!isString(valueToOmit[index])) {\n                memo.push(_this11._omitDeep(value, valueToOmit[index]));\n              }\n\n              return memo;\n            }, []);\n          } else {\n            return target;\n          }\n        } else {\n          return target;\n        }\n      }\n    }, {\n      key: '_getActiveErrors',\n      value: function _getActiveErrors() {\n        var _state4 = this.state,\n            errors = _state4.errors,\n            validateAllValues = _state4.validateAllValues,\n            touchedValues = _state4.touchedValues,\n            validatedValues = _state4.validatedValues;\n\n\n        var externalErrors = get(this.props, externalErrorsPath || 'errors', {});\n        var baseErrors = this._omitDeep(externalErrors, touchedValues);\n\n        if (validateAllValues) {\n          return defaultsDeep({}, errors, baseErrors);\n        } else {\n          return defaultsDeep(pickErrors(errors, validatedValues), baseErrors);\n        }\n      }\n    }, {\n      key: '_valuesWithDefaults',\n      value: function _valuesWithDefaults(_ref8) {\n        var _this12 = this;\n\n        var values = _ref8.values,\n            touchedValues = _ref8.touchedValues;\n\n\n        if (only) {\n          var validateableFields = arrayFrom(only);\n\n          var propValues = reduce(validateableFields, function (memo, path) {\n            var pathSegments = path.split(/[.[]/);\n\n            /**\n             * When using a complex or nested path for the 'only' option, we need\n             * to copy the root object - not just the leaf node - to ensure attributes\n             * in that root object that are not being validated, aren't omitted when\n             * it comes time to (deeply) merge in the validated values\n             */\n            var pathRoot = pathSegments.length > 1 ? pathSegments[0] : path;\n\n            var sourceValue = get(_this12.props, pathRoot);\n            set(memo, pathRoot, sourceValue);\n\n            return memo;\n          }, {});\n\n          var defaultValues = pickDeep(ValidatedComponent.defaultProps, validateableFields);\n\n          var propsWithDefaults = defaultsDeep({}, propValues, defaultValues);\n\n          return valuesWithDefaultsAndExemptions({\n            defaultValue: propsWithDefaults,\n            overrides: wrapObject(values),\n            deepMergeExemptions: wrapObject(touchedValues)\n          });\n        } else {\n          var _propsWithDefaults = defaultsDeep({}, this.props, ValidatedComponent.defaultProps);\n\n          return valuesWithDefaultsAndExemptions({\n            defaultValue: _propsWithDefaults,\n            overrides: wrapObject(values),\n            deepMergeExemptions: wrapObject(touchedValues)\n          });\n        }\n      }\n    }, {\n      key: '_getCurrentValue',\n      value: function _getCurrentValue(path) {\n        return get(unwrapObject(this._valuesWithDefaults(this.state)), path);\n      }\n    }, {\n      key: '_validate',\n      value: function _validate(nextState, afterValidationCallback) {\n        var _this13 = this;\n\n        var afterValidationHandler = this._afterValidationHandler(nextState, afterValidationCallback);\n\n        var valuesWithDefaults = unwrapObject(this._valuesWithDefaults(nextState));\n\n        var validatorOptions = _extends({}, nextState, {\n          valuesWithDefaults: valuesWithDefaults,\n          touchedValues: pickOutermost(nextState.touchedValues),\n          validatedValues: pickOutermost(nextState.validatedValues),\n          props: _extends({}, this.props)\n        });\n\n        if (joiSchema) {\n          Joi.validate(valuesWithDefaults, joiSchema, _extends({ abortEarly: false }, joiOptions), function (joiError) {\n            var joiErrorList = joiError && joiError.details || [];\n\n            var errors = reduce(joiErrorList, function (joiErrors, _ref9) {\n              var message = _ref9.message,\n                  path = _ref9.path;\n\n              var messageWithFieldNameRemoved = message.replace(/^\".+\" /, '');\n\n              set(joiErrors, path, messageWithFieldNameRemoved);\n\n              return joiErrors;\n            }, {});\n\n            _this13._callValidatorIfDefined(arrayFrom(validator), _extends({}, validatorOptions, { errors: errors\n            }), afterValidationHandler);\n          });\n        } else {\n          this._callValidatorIfDefined(arrayFrom(validator), _extends({}, validatorOptions, { errors: {}\n          }), afterValidationHandler);\n        }\n      }\n    }, {\n      key: '_callValidatorIfDefined',\n      value: function _callValidatorIfDefined(validatorList, validatorOptions, afterValidatorHasRun) {\n        var _this14 = this;\n\n        if (validatorList.length > 0) {\n          var callback = function () {\n            if (validatorList.length > 1) {\n\n              return function (_ref10) {\n                var values = _ref10.values,\n                    errors = _ref10.errors;\n\n\n                _this14._callValidatorIfDefined(drop(validatorList), _extends({}, validatorOptions, { values: values, errors: errors\n                }), afterValidatorHasRun);\n              };\n            } else {\n              return afterValidatorHasRun;\n            }\n          }();\n\n          validatorList[0](validatorOptions, callback);\n        } else {\n          var values = validatorOptions.values,\n              errors = validatorOptions.errors;\n\n\n          afterValidatorHasRun({ values: values, errors: errors });\n        }\n      }\n    }, {\n      key: '_afterValidationHandler',\n      value: function _afterValidationHandler(nextState, afterValidationComplete) {\n        var _this15 = this;\n\n        return function (_ref11) {\n          var errors = _ref11.errors,\n              values = _ref11.values;\n\n\n          var newState = _extends({}, nextState, { errors: errors, values: values\n          });\n\n          _this15.setState(newState, afterValidationComplete);\n        };\n      }\n    }]);\n    return ValidatorComponent;\n  }(React.Component);\n\n  return ValidatorComponent;\n};\n\nReactJoiValidation.setJoi = function (joiClass) {\n  Joi = joiClass;\n};\n\nReactJoiValidation.setChangeHandlerStrategy = function (changeHandlerStrategy) {\n  defaultChangeHandlerStrategy = changeHandlerStrategy;\n};\n\nexports.guessCorrectValue = guessCorrectValue;\nexports.useEventTargetValue = useEventTargetValue;\nexports.useFirstArgument = useFirstArgument;\nexports.useSecondArgument = useSecondArgument;\nexports.useThirdArgument = useThirdArgument;\nexports.default = ReactJoiValidation;\n"]},"metadata":{},"sourceType":"script"}