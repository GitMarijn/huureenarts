{"ast":null,"code":"import _objectSpread from \"/Users/marijnvanloo/Documents/Projects .nosync/huureenarts.nl_react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/marijnvanloo/Documents/Projects .nosync/huureenarts.nl_react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/marijnvanloo/Documents/Projects .nosync/huureenarts.nl_react/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/marijnvanloo/Documents/Projects .nosync/huureenarts.nl_react/client/src/components/SignUpForm.js\";\nimport React, { useEffect } from \"react\";\nimport { Formik, Form, useField, useFormikContext } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nconst MyTextInput = (_ref) => {\n  let label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const _useField = useField(props),\n        _useField2 = _slicedToArray(_useField, 2),\n        field = _useField2[0],\n        meta = _useField2[1];\n\n  const c = useFormikContext();\n  useEffect(() => {\n    if (c !== \"lol\") {\n      c.setFieldValue(\"lol\");\n    }\n  }, [c]);\n  console.log(c);\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, label), React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst MyCheckbox = (_ref2) => {\n  let children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  const _useField3 = useField(_objectSpread({}, props, {\n    type: \"checkbox\"\n  })),\n        _useField4 = _slicedToArray(_useField3, 2),\n        field = _useField4[0],\n        meta = _useField4[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({}, field, props, {\n    type: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), children), meta.touched && meta.error ? React.createElement(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, meta.error) : null);\n}; // Styled components ....\n\n\nconst StyledSelect = styled.select`\n  color: var(--blue);\n`;\nconst StyledErrorMessage = styled.div`\n  font-size: 12px;\n  color: var(--red-600);\n  width: 400px;\n  margin-top: 0.25rem;\n  &:before {\n    content: \"❌ \";\n    font-size: 10px;\n  }\n  @media (prefers-color-scheme: dark) {\n    color: var(--red-300);\n  }\n`;\nconst StyledLabel = styled.label`\n  margin-top: 1rem;\n`;\n\nconst MySelect = (_ref3) => {\n  let label = _ref3.label,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const _useField5 = useField(props),\n        _useField6 = _slicedToArray(_useField5, 2),\n        field = _useField6[0],\n        meta = _useField6[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, label), React.createElement(StyledSelect, Object.assign({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), meta.touched && meta.error ? React.createElement(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, meta.error) : null);\n}; // And now we can use these\n\n\nconst SignUpForm = () => {\n  return React.createElement(React.Fragment, null, React.createElement(Formik, {\n    initialValues: {\n      voornaam: \"\",\n      achternaam: \"\",\n      email: \"\",\n      BLS: false,\n      // added for our checkbox\n      specialisme: \"\" // added for our select\n\n    },\n    validationSchema: Yup.object({\n      voornaam: Yup.string().min(2, \"Minimaal 2 letters\").required(\"Required\"),\n      achternaam: Yup.string().min(20, \"Minimaal 2 letters\").required(\"Required\"),\n      email: Yup.string().email(\"Ongeldig emailadres\").required(\"Required\"),\n      BLS: Yup.boolean().oneOf([true], \"You must accept the terms and conditions.\"),\n      specialisme: Yup.string() // specify the set of valid values for job type\n      // @see http://bit.ly/yup-mixed-oneOf\n      .oneOf([\"designer\", \"development\", \"product\", \"other\"], \"Invalid Job Type\").required(\"Required\")\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(MyTextInput, {\n    label: \"Voornaam\",\n    name: \"voornaam\",\n    type: \"text\",\n    placeholder: \"Voornaam\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(MyTextInput, {\n    label: \"Achternaam\",\n    name: \"achternaam\",\n    type: \"text\",\n    placeholder: \"Achternaam\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(MyTextInput, {\n    label: \"Emailadres\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Emailadres\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(MySelect, {\n    label: \"Specialisme\",\n    name: \"specialisme\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Selecteer een specialisme\"), React.createElement(\"option\", {\n    value: \"designer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Designer\"), React.createElement(\"option\", {\n    value: \"development\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Developer\"), React.createElement(\"option\", {\n    value: \"product\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Product Manager\"), React.createElement(\"option\", {\n    value: \"other\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Other\")), React.createElement(MyCheckbox, {\n    name: \"BLS\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"I accept the terms and conditions\"), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Aanmelden\"))));\n};\n\nexport default SignUpForm;","map":{"version":3,"sources":["/Users/marijnvanloo/Documents/Projects .nosync/huureenarts.nl_react/client/src/components/SignUpForm.js"],"names":["React","useEffect","Formik","Form","useField","useFormikContext","Yup","styled","MyTextInput","label","props","field","meta","c","setFieldValue","console","log","id","name","touched","error","MyCheckbox","children","type","StyledSelect","select","StyledErrorMessage","div","StyledLabel","MySelect","SignUpForm","voornaam","achternaam","email","BLS","specialisme","object","string","min","required","boolean","oneOf","values","setSubmitting","setTimeout","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Formik, Form, useField, useFormikContext } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nconst MyTextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  const c = useFormikContext();\n  useEffect(() => {\n    if (c !== \"lol\") {\n      c.setFieldValue(\"lol\");\n    }\n  }, [c]);\n  console.log(c);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\n  return (\n    <>\n      <label className=\"checkbox\">\n        <input {...field} {...props} type=\"checkbox\" />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\n// Styled components ....\nconst StyledSelect = styled.select`\n  color: var(--blue);\n`;\n\nconst StyledErrorMessage = styled.div`\n  font-size: 12px;\n  color: var(--red-600);\n  width: 400px;\n  margin-top: 0.25rem;\n  &:before {\n    content: \"❌ \";\n    font-size: 10px;\n  }\n  @media (prefers-color-scheme: dark) {\n    color: var(--red-300);\n  }\n`;\n\nconst StyledLabel = styled.label`\n  margin-top: 1rem;\n`;\n\nconst MySelect = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\n      <StyledSelect {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\n      ) : null}\n    </>\n  );\n};\n\n// And now we can use these\nconst SignUpForm = () => {\n  return (\n    <>\n      <Formik\n        initialValues={{\n          voornaam: \"\",\n          achternaam: \"\",\n          email: \"\",\n          BLS: false, // added for our checkbox\n          specialisme: \"\", // added for our select\n        }}\n        validationSchema={Yup.object({\n          voornaam: Yup.string()\n            .min(2, \"Minimaal 2 letters\")\n            .required(\"Required\"),\n          achternaam: Yup.string()\n            .min(20, \"Minimaal 2 letters\")\n            .required(\"Required\"),\n          email: Yup.string().email(\"Ongeldig emailadres\").required(\"Required\"),\n          BLS: Yup.boolean().oneOf(\n            [true],\n            \"You must accept the terms and conditions.\"\n          ),\n          specialisme: Yup.string()\n            // specify the set of valid values for job type\n            // @see http://bit.ly/yup-mixed-oneOf\n            .oneOf(\n              [\"designer\", \"development\", \"product\", \"other\"],\n              \"Invalid Job Type\"\n            )\n            .required(\"Required\"),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        <Form>\n          <MyTextInput\n            label=\"Voornaam\"\n            name=\"voornaam\"\n            type=\"text\"\n            placeholder=\"Voornaam\"\n          />\n          <MyTextInput\n            label=\"Achternaam\"\n            name=\"achternaam\"\n            type=\"text\"\n            placeholder=\"Achternaam\"\n          />\n          <MyTextInput\n            label=\"Emailadres\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Emailadres\"\n          />\n          <MySelect label=\"Specialisme\" name=\"specialisme\">\n            <option value=\"\">Selecteer een specialisme</option>\n            <option value=\"designer\">Designer</option>\n            <option value=\"development\">Developer</option>\n            <option value=\"product\">Product Manager</option>\n            <option value=\"other\">Other</option>\n          </MySelect>\n          <MyCheckbox name=\"BLS\">I accept the terms and conditions</MyCheckbox>\n\n          <button type=\"submit\">Aanmelden</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\nexport default SignUpForm;\n"]},"metadata":{},"sourceType":"module"}