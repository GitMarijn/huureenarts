{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { useRouter } from \"state\"; // Component that attaches scroll to top hanler on router change\n// renders nothing, just attaches side effects\n\nexport const ScrollToTop = () => {\n  // this assumes that current router state is accessed via hook\n  // but it does not matter, pathname and search (or that ever) may come from props, context, etc.\n  const {\n    pathname,\n    search\n  } = useRouter(); // just run the effect on pathname and/or search change\n\n  useEffect(() => {\n    try {\n      // trying to use new API - https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\n      window.scroll({\n        top: 0,\n        left: 0,\n        behavior: \"smooth\"\n      });\n    } catch (error) {\n      // just a fallback for older browsers\n      window.scrollTo(0, 0);\n    }\n  }, [pathname, search]); // renders nothing, since nothing is needed\n\n  return null;\n};","map":{"version":3,"sources":["/Users/marijnvanloo/Documents/Projects .nosync/huureenarts.nl_react/client/src/containers/ScrollToTop.js"],"names":["React","useEffect","useRouter","ScrollToTop","pathname","search","window","scroll","top","left","behavior","error","scrollTo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,OAA1B,C,CAEA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B;AACA;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBH,SAAS,EAAtC,CAH+B,CAK/B;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI;AACF;AACAK,MAAAA,MAAM,CAACC,MAAP,CAAc;AACZC,QAAAA,GAAG,EAAE,CADO;AAEZC,QAAAA,IAAI,EAAE,CAFM;AAGZC,QAAAA,QAAQ,EAAE;AAHE,OAAd;AAKD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACd;AACAL,MAAAA,MAAM,CAACM,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACD;AACF,GAZQ,EAYN,CAACR,QAAD,EAAWC,MAAX,CAZM,CAAT,CAN+B,CAoB/B;;AACA,SAAO,IAAP;AACD,CAtBM","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useRouter } from \"state\";\n\n// Component that attaches scroll to top hanler on router change\n// renders nothing, just attaches side effects\nexport const ScrollToTop = () => {\n  // this assumes that current router state is accessed via hook\n  // but it does not matter, pathname and search (or that ever) may come from props, context, etc.\n  const { pathname, search } = useRouter();\n\n  // just run the effect on pathname and/or search change\n  useEffect(() => {\n    try {\n      // trying to use new API - https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\n      window.scroll({\n        top: 0,\n        left: 0,\n        behavior: \"smooth\",\n      });\n    } catch (error) {\n      // just a fallback for older browsers\n      window.scrollTo(0, 0);\n    }\n  }, [pathname, search]);\n\n  // renders nothing, since nothing is needed\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}